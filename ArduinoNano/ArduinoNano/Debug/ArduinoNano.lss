
ArduinoNano.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000e64  00000ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  00800166  00800166  00000f5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a0  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007ee5  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001824  00000000  00000000  00009255  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000165c  00000000  00000000  0000aa79  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b70  00000000  00000000  0000c0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001d1c  00000000  00000000  0000cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000427e  00000000  00000000  0000e964  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  00012be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__ctors_end>
   4:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_1>
   8:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_2>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_7>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <__vector_16>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 99 02 	jmp	0x532	; 0x532 <__vector_18>
  4c:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_19>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	02 00       	.word	0x0002	; ????

00000069 <digital_pin_to_timer_PGM>:
  69:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
  79:	00 00 00 00                                         ....

0000007d <digital_pin_to_bit_mask_PGM>:
  7d:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  8d:	04 08 10 20                                         ... 

00000091 <digital_pin_to_port_PGM>:
  91:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a1:	03 03 03 03                                         ....

000000a5 <port_to_output_PGM>:
  a5:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000af <port_to_mode_PGM>:
  af:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000ba <__ctors_start>:
  ba:	01 03       	mulsu	r16, r17
  bc:	71 03       	mulsu	r23, r17

000000be <__ctors_end>:
  be:	11 24       	eor	r1, r1
  c0:	1f be       	out	0x3f, r1	; 63
  c2:	cf ef       	ldi	r28, 0xFF	; 255
  c4:	d8 e0       	ldi	r29, 0x08	; 8
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	cd bf       	out	0x3d, r28	; 61

000000ca <__do_copy_data>:
  ca:	11 e0       	ldi	r17, 0x01	; 1
  cc:	a0 e0       	ldi	r26, 0x00	; 0
  ce:	b1 e0       	ldi	r27, 0x01	; 1
  d0:	e4 e6       	ldi	r30, 0x64	; 100
  d2:	fe e0       	ldi	r31, 0x0E	; 14
  d4:	02 c0       	rjmp	.+4      	; 0xda <__do_copy_data+0x10>
  d6:	05 90       	lpm	r0, Z+
  d8:	0d 92       	st	X+, r0
  da:	a6 36       	cpi	r26, 0x66	; 102
  dc:	b1 07       	cpc	r27, r17
  de:	d9 f7       	brne	.-10     	; 0xd6 <__do_copy_data+0xc>

000000e0 <__do_clear_bss>:
  e0:	22 e0       	ldi	r18, 0x02	; 2
  e2:	a6 e6       	ldi	r26, 0x66	; 102
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	01 c0       	rjmp	.+2      	; 0xea <.do_clear_bss_start>

000000e8 <.do_clear_bss_loop>:
  e8:	1d 92       	st	X+, r1

000000ea <.do_clear_bss_start>:
  ea:	ad 31       	cpi	r26, 0x1D	; 29
  ec:	b2 07       	cpc	r27, r18
  ee:	e1 f7       	brne	.-8      	; 0xe8 <.do_clear_bss_loop>

000000f0 <__do_global_ctors>:
  f0:	10 e0       	ldi	r17, 0x00	; 0
  f2:	cf e5       	ldi	r28, 0x5F	; 95
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	04 c0       	rjmp	.+8      	; 0x100 <__do_global_ctors+0x10>
  f8:	21 97       	sbiw	r28, 0x01	; 1
  fa:	fe 01       	movw	r30, r28
  fc:	0e 94 2a 07 	call	0xe54	; 0xe54 <__tablejump2__>
 100:	cd 35       	cpi	r28, 0x5D	; 93
 102:	d1 07       	cpc	r29, r17
 104:	c9 f7       	brne	.-14     	; 0xf8 <__do_global_ctors+0x8>
 106:	0e 94 7d 03 	call	0x6fa	; 0x6fa <main>
 10a:	0c 94 30 07 	jmp	0xe60	; 0xe60 <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <setup>:
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 112:	26 e0       	ldi	r18, 0x06	; 6
 114:	40 e8       	ldi	r20, 0x80	; 128
 116:	55 e2       	ldi	r21, 0x25	; 37
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	86 e6       	ldi	r24, 0x66	; 102
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 30 02 	call	0x460	; 0x460 <_ZN14HardwareSerial5beginEmh>
void matrixReset();

void setup()
{
	Serial.begin(9600);
	Serial.print("Inicio");
 124:	69 e4       	ldi	r22, 0x49	; 73
 126:	71 e0       	ldi	r23, 0x01	; 1
 128:	86 e6       	ldi	r24, 0x66	; 102
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 b9 03 	call	0x772	; 0x772 <_ZN5Print5printEPKc>
	pinMode(13, OUTPUT);
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
	pinMode(ROW_DATA, OUTPUT);
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
	pinMode(ROW_CLK, OUTPUT);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
	pinMode(ROW_LAT, OUTPUT);
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	84 e0       	ldi	r24, 0x04	; 4
 14c:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
	pinMode(COL_DATA, OUTPUT);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
	pinMode(COL_CLK, OUTPUT);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
	pinMode(COL_LAT, OUTPUT);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	87 e0       	ldi	r24, 0x07	; 7
 164:	0e 94 54 06 	call	0xca8	; 0xca8 <pinMode>
 168:	08 95       	ret

0000016a <_Z11matrizWritehh>:
	matrixTurnOn();
	counter++;
}

void matrizWrite(byte rowByte, byte colByte)
{
 16a:	cf 93       	push	r28
 16c:	df 93       	push	r29
 16e:	d8 2f       	mov	r29, r24
 170:	c6 2f       	mov	r28, r22
	openRowLat;
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
	openColLat;
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
		shiftOut(ROW_DATA, ROW_CLK, MSBFIRST, rowByte);
 182:	2d 2f       	mov	r18, r29
 184:	41 e0       	ldi	r20, 0x01	; 1
 186:	63 e0       	ldi	r22, 0x03	; 3
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	0e 94 c4 06 	call	0xd88	; 0xd88 <shiftOut>
		shiftOut(COL_DATA, COL_CLK, MSBFIRST, colByte);
 18e:	2c 2f       	mov	r18, r28
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	66 e0       	ldi	r22, 0x06	; 6
 194:	85 e0       	ldi	r24, 0x05	; 5
 196:	0e 94 c4 06 	call	0xd88	; 0xd88 <shiftOut>
	closeRowLat;
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	84 e0       	ldi	r24, 0x04	; 4
 19e:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
	closeColLat;
 1a2:	61 e0       	ldi	r22, 0x01	; 1
 1a4:	87 e0       	ldi	r24, 0x07	; 7
 1a6:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <_Z12matrixTurnOnv>:




void matrixTurnOn()
{
 1b0:	4f 92       	push	r4
 1b2:	5f 92       	push	r5
 1b4:	6f 92       	push	r6
 1b6:	7f 92       	push	r7
 1b8:	9f 92       	push	r9
 1ba:	af 92       	push	r10
 1bc:	bf 92       	push	r11
 1be:	cf 92       	push	r12
 1c0:	df 92       	push	r13
 1c2:	ef 92       	push	r14
 1c4:	ff 92       	push	r15
 1c6:	0f 93       	push	r16
 1c8:	1f 93       	push	r17
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	28 97       	sbiw	r28, 0x08	; 8
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61
	byte rowPos[ROWMAX] = {0b01111111, 0b10111111, 0b11011111, 0b11101111, 0b11110111, 0b11111011, 0b111111101, 0b11111110};
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	e1 e4       	ldi	r30, 0x41	; 65
 1e2:	f1 e0       	ldi	r31, 0x01	; 1
 1e4:	de 01       	movw	r26, r28
 1e6:	11 96       	adiw	r26, 0x01	; 1
 1e8:	01 90       	ld	r0, Z+
 1ea:	0d 92       	st	X+, r0
 1ec:	8a 95       	dec	r24
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <_Z12matrixTurnOnv+0x38>
 1f0:	ce 01       	movw	r24, r28
 1f2:	01 96       	adiw	r24, 0x01	; 1
 1f4:	6c 01       	movw	r12, r24
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	ef 2e       	mov	r14, r31
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	ff 2e       	mov	r15, r31
 200:	f0 2d       	mov	r31, r0
 202:	0f 2e       	mov	r0, r31
 204:	f0 e4       	ldi	r31, 0x40	; 64
 206:	af 2e       	mov	r10, r31
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	bf 2e       	mov	r11, r31
 20c:	f0 2d       	mov	r31, r0
	byte currentRow, currentCol;
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
	{
		rowByte = rowPos[currentRow];
 20e:	91 2c       	mov	r9, r1
 210:	00 e0       	ldi	r16, 0x00	; 0
		for(currentCol=0; currentCol<COLMAX; currentCol++)
		{
			if(a[currentRow][currentCol] == 1)
				bitWrite(colByte, currentCol, 1);
			else
				bitWrite(colByte, currentCol, 0);
 212:	41 2c       	mov	r4, r1
 214:	51 2c       	mov	r5, r1
 216:	32 01       	movw	r6, r4
 218:	43 94       	inc	r4
	byte currentRow, currentCol;
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
	{
		rowByte = rowPos[currentRow];
 21a:	f6 01       	movw	r30, r12
 21c:	81 91       	ld	r24, Z+
 21e:	6f 01       	movw	r12, r30
 220:	f7 01       	movw	r30, r14
 222:	29 2d       	mov	r18, r9
 224:	30 2f       	mov	r19, r16
		for(currentCol=0; currentCol<COLMAX; currentCol++)
		{
			if(a[currentRow][currentCol] == 1)
 226:	41 91       	ld	r20, Z+
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	61 f4       	brne	.+24     	; 0x244 <_Z12matrixTurnOnv+0x94>
				bitWrite(colByte, currentCol, 1);
 22c:	b3 01       	movw	r22, r6
 22e:	a2 01       	movw	r20, r4
 230:	02 2e       	mov	r0, r18
 232:	04 c0       	rjmp	.+8      	; 0x23c <_Z12matrixTurnOnv+0x8c>
 234:	44 0f       	add	r20, r20
 236:	55 1f       	adc	r21, r21
 238:	66 1f       	adc	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	0a 94       	dec	r0
 23e:	d2 f7       	brpl	.-12     	; 0x234 <_Z12matrixTurnOnv+0x84>
 240:	14 2b       	or	r17, r20
 242:	0c c0       	rjmp	.+24     	; 0x25c <_Z12matrixTurnOnv+0xac>
			else
				bitWrite(colByte, currentCol, 0);
 244:	b3 01       	movw	r22, r6
 246:	a2 01       	movw	r20, r4
 248:	02 2e       	mov	r0, r18
 24a:	04 c0       	rjmp	.+8      	; 0x254 <_Z12matrixTurnOnv+0xa4>
 24c:	44 0f       	add	r20, r20
 24e:	55 1f       	adc	r21, r21
 250:	66 1f       	adc	r22, r22
 252:	77 1f       	adc	r23, r23
 254:	0a 94       	dec	r0
 256:	d2 f7       	brpl	.-12     	; 0x24c <_Z12matrixTurnOnv+0x9c>
 258:	40 95       	com	r20
 25a:	14 23       	and	r17, r20
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
	{
		rowByte = rowPos[currentRow];
		for(currentCol=0; currentCol<COLMAX; currentCol++)
 260:	28 30       	cpi	r18, 0x08	; 8
 262:	31 05       	cpc	r19, r1
 264:	01 f7       	brne	.-64     	; 0x226 <_Z12matrixTurnOnv+0x76>
			if(a[currentRow][currentCol] == 1)
				bitWrite(colByte, currentCol, 1);
			else
				bitWrite(colByte, currentCol, 0);
		}
		matrizWrite(rowByte, colByte);
 266:	61 2f       	mov	r22, r17
 268:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z11matrizWritehh>
		delay(1);
 26c:	c3 01       	movw	r24, r6
 26e:	b2 01       	movw	r22, r4
 270:	0e 94 be 05 	call	0xb7c	; 0xb7c <delay>
 274:	f8 e0       	ldi	r31, 0x08	; 8
 276:	ef 0e       	add	r14, r31
 278:	f1 1c       	adc	r15, r1
{
	byte rowPos[ROWMAX] = {0b01111111, 0b10111111, 0b11011111, 0b11101111, 0b11110111, 0b11111011, 0b111111101, 0b11111110};
	byte currentRow, currentCol;
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
 27a:	ea 14       	cp	r14, r10
 27c:	fb 04       	cpc	r15, r11
 27e:	69 f6       	brne	.-102    	; 0x21a <_Z12matrixTurnOnv+0x6a>
				bitWrite(colByte, currentCol, 0);
		}
		matrizWrite(rowByte, colByte);
		delay(1);
	}
}
 280:	28 96       	adiw	r28, 0x08	; 8
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	bf 90       	pop	r11
 29e:	af 90       	pop	r10
 2a0:	9f 90       	pop	r9
 2a2:	7f 90       	pop	r7
 2a4:	6f 90       	pop	r6
 2a6:	5f 90       	pop	r5
 2a8:	4f 90       	pop	r4
 2aa:	08 95       	ret

000002ac <loop>:

//Infinite loop
void loop()
{

    matrixTurnOn();
 2ac:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <_Z12matrixTurnOnv>
 2b0:	08 95       	ret

000002b2 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2b2:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2b4:	91 8d       	ldd	r25, Z+25	; 0x19
 2b6:	22 8d       	ldd	r18, Z+26	; 0x1a
 2b8:	89 2f       	mov	r24, r25
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	80 5c       	subi	r24, 0xC0	; 192
 2be:	9f 4f       	sbci	r25, 0xFF	; 255
 2c0:	82 1b       	sub	r24, r18
 2c2:	91 09       	sbc	r25, r1
}
 2c4:	8f 73       	andi	r24, 0x3F	; 63
 2c6:	99 27       	eor	r25, r25
 2c8:	08 95       	ret

000002ca <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
 2ca:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
 2cc:	91 8d       	ldd	r25, Z+25	; 0x19
 2ce:	82 8d       	ldd	r24, Z+26	; 0x1a
 2d0:	98 17       	cp	r25, r24
 2d2:	31 f0       	breq	.+12     	; 0x2e0 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2d4:	82 8d       	ldd	r24, Z+26	; 0x1a
 2d6:	e8 0f       	add	r30, r24
 2d8:	f1 1d       	adc	r31, r1
 2da:	85 8d       	ldd	r24, Z+29	; 0x1d
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2e0:	8f ef       	ldi	r24, 0xFF	; 255
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2e4:	08 95       	ret

000002e6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
 2e6:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2e8:	91 8d       	ldd	r25, Z+25	; 0x19
 2ea:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ec:	98 17       	cp	r25, r24
 2ee:	61 f0       	breq	.+24     	; 0x308 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2f0:	82 8d       	ldd	r24, Z+26	; 0x1a
 2f2:	df 01       	movw	r26, r30
 2f4:	a8 0f       	add	r26, r24
 2f6:	b1 1d       	adc	r27, r1
 2f8:	5d 96       	adiw	r26, 0x1d	; 29
 2fa:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2fc:	92 8d       	ldd	r25, Z+26	; 0x1a
 2fe:	9f 5f       	subi	r25, 0xFF	; 255
 300:	9f 73       	andi	r25, 0x3F	; 63
 302:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 30c:	08 95       	ret

0000030e <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 30e:	87 ef       	ldi	r24, 0xF7	; 247
 310:	92 e0       	ldi	r25, 0x02	; 2
 312:	89 2b       	or	r24, r25
 314:	49 f0       	breq	.+18     	; 0x328 <_Z14serialEventRunv+0x1a>
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	89 2b       	or	r24, r25
 31c:	29 f0       	breq	.+10     	; 0x328 <_Z14serialEventRunv+0x1a>
 31e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <_Z17Serial0_availablev>
 322:	81 11       	cpse	r24, r1
 324:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 328:	08 95       	ret

0000032a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 32a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 32c:	84 8d       	ldd	r24, Z+28	; 0x1c
 32e:	df 01       	movw	r26, r30
 330:	a8 0f       	add	r26, r24
 332:	b1 1d       	adc	r27, r1
 334:	a3 5a       	subi	r26, 0xA3	; 163
 336:	bf 4f       	sbci	r27, 0xFF	; 255
 338:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 33a:	24 8d       	ldd	r18, Z+28	; 0x1c
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	2f 5f       	subi	r18, 0xFF	; 255
 340:	3f 4f       	sbci	r19, 0xFF	; 255
 342:	2f 73       	andi	r18, 0x3F	; 63
 344:	30 78       	andi	r19, 0x80	; 128
 346:	33 23       	and	r19, r19
 348:	34 f4       	brge	.+12     	; 0x356 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	31 09       	sbc	r19, r1
 34e:	20 6c       	ori	r18, 0xC0	; 192
 350:	3f 6f       	ori	r19, 0xFF	; 255
 352:	2f 5f       	subi	r18, 0xFF	; 255
 354:	3f 4f       	sbci	r19, 0xFF	; 255
 356:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
 358:	a6 89       	ldd	r26, Z+22	; 0x16
 35a:	b7 89       	ldd	r27, Z+23	; 0x17
 35c:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
 35e:	a0 89       	ldd	r26, Z+16	; 0x10
 360:	b1 89       	ldd	r27, Z+17	; 0x11
 362:	8c 91       	ld	r24, X
 364:	80 64       	ori	r24, 0x40	; 64
 366:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
 368:	93 8d       	ldd	r25, Z+27	; 0x1b
 36a:	84 8d       	ldd	r24, Z+28	; 0x1c
 36c:	98 13       	cpse	r25, r24
 36e:	06 c0       	rjmp	.+12     	; 0x37c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 370:	02 88       	ldd	r0, Z+18	; 0x12
 372:	f3 89       	ldd	r31, Z+19	; 0x13
 374:	e0 2d       	mov	r30, r0
 376:	80 81       	ld	r24, Z
 378:	8f 7d       	andi	r24, 0xDF	; 223
 37a:	80 83       	st	Z, r24
 37c:	08 95       	ret

0000037e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 384:	88 8d       	ldd	r24, Y+24	; 0x18
 386:	81 11       	cpse	r24, r1
 388:	0f c0       	rjmp	.+30     	; 0x3a8 <_ZN14HardwareSerial5flushEv+0x2a>
 38a:	18 c0       	rjmp	.+48     	; 0x3bc <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 38c:	0f b6       	in	r0, 0x3f	; 63
 38e:	07 fc       	sbrc	r0, 7
 390:	0d c0       	rjmp	.+26     	; 0x3ac <_ZN14HardwareSerial5flushEv+0x2e>
 392:	90 81       	ld	r25, Z
 394:	95 ff       	sbrs	r25, 5
 396:	0a c0       	rjmp	.+20     	; 0x3ac <_ZN14HardwareSerial5flushEv+0x2e>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
 398:	a8 89       	ldd	r26, Y+16	; 0x10
 39a:	b9 89       	ldd	r27, Y+17	; 0x11
 39c:	8c 91       	ld	r24, X
 39e:	85 ff       	sbrs	r24, 5
 3a0:	05 c0       	rjmp	.+10     	; 0x3ac <_ZN14HardwareSerial5flushEv+0x2e>
	  _tx_udr_empty_irq();
 3a2:	ce 01       	movw	r24, r28
 3a4:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 3a8:	ea 89       	ldd	r30, Y+18	; 0x12
 3aa:	fb 89       	ldd	r31, Y+19	; 0x13
 3ac:	90 81       	ld	r25, Z
 3ae:	95 fd       	sbrc	r25, 5
 3b0:	ed cf       	rjmp	.-38     	; 0x38c <_ZN14HardwareSerial5flushEv+0xe>
 3b2:	a8 89       	ldd	r26, Y+16	; 0x10
 3b4:	b9 89       	ldd	r27, Y+17	; 0x11
 3b6:	8c 91       	ld	r24, X
 3b8:	86 ff       	sbrs	r24, 6
 3ba:	e8 cf       	rjmp	.-48     	; 0x38c <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
 3c2:	0f 93       	push	r16
 3c4:	1f 93       	push	r17
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	fc 01       	movw	r30, r24
  _written = true;
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 3d0:	93 8d       	ldd	r25, Z+27	; 0x1b
 3d2:	84 8d       	ldd	r24, Z+28	; 0x1c
 3d4:	98 13       	cpse	r25, r24
 3d6:	22 c0       	rjmp	.+68     	; 0x41c <_ZN14HardwareSerial5writeEh+0x5a>
 3d8:	a0 89       	ldd	r26, Z+16	; 0x10
 3da:	b1 89       	ldd	r27, Z+17	; 0x11
 3dc:	8c 91       	ld	r24, X
 3de:	85 fd       	sbrc	r24, 5
 3e0:	2f c0       	rjmp	.+94     	; 0x440 <_ZN14HardwareSerial5writeEh+0x7e>
 3e2:	1c c0       	rjmp	.+56     	; 0x41c <_ZN14HardwareSerial5writeEh+0x5a>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
 3e4:	0f b6       	in	r0, 0x3f	; 63
 3e6:	07 fc       	sbrc	r0, 7
 3e8:	08 c0       	rjmp	.+16     	; 0x3fa <_ZN14HardwareSerial5writeEh+0x38>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3ea:	e8 89       	ldd	r30, Y+16	; 0x10
 3ec:	f9 89       	ldd	r31, Y+17	; 0x11
 3ee:	80 81       	ld	r24, Z
 3f0:	85 ff       	sbrs	r24, 5
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <_ZN14HardwareSerial5writeEh+0x38>
	_tx_udr_empty_irq();
 3f4:	ce 01       	movw	r24, r28
 3f6:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
 3fc:	09 17       	cp	r16, r25
 3fe:	91 f3       	breq	.-28     	; 0x3e4 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 400:	8b 8d       	ldd	r24, Y+27	; 0x1b
 402:	fe 01       	movw	r30, r28
 404:	e8 0f       	add	r30, r24
 406:	f1 1d       	adc	r31, r1
 408:	e3 5a       	subi	r30, 0xA3	; 163
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	10 83       	st	Z, r17
  _tx_buffer_head = i;
 40e:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
 410:	ea 89       	ldd	r30, Y+18	; 0x12
 412:	fb 89       	ldd	r31, Y+19	; 0x13
 414:	80 81       	ld	r24, Z
 416:	80 62       	ori	r24, 0x20	; 32
 418:	80 83       	st	Z, r24
  
  return 1;
 41a:	1b c0       	rjmp	.+54     	; 0x452 <_ZN14HardwareSerial5writeEh+0x90>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 41c:	23 8d       	ldd	r18, Z+27	; 0x1b
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	2f 5f       	subi	r18, 0xFF	; 255
 422:	3f 4f       	sbci	r19, 0xFF	; 255
 424:	2f 73       	andi	r18, 0x3F	; 63
 426:	30 78       	andi	r19, 0x80	; 128
 428:	33 23       	and	r19, r19
 42a:	34 f4       	brge	.+12     	; 0x438 <_ZN14HardwareSerial5writeEh+0x76>
 42c:	21 50       	subi	r18, 0x01	; 1
 42e:	31 09       	sbc	r19, r1
 430:	20 6c       	ori	r18, 0xC0	; 192
 432:	3f 6f       	ori	r19, 0xFF	; 255
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	16 2f       	mov	r17, r22
 43a:	ef 01       	movw	r28, r30
 43c:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 43e:	dd cf       	rjmp	.-70     	; 0x3fa <_ZN14HardwareSerial5writeEh+0x38>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
 440:	a6 89       	ldd	r26, Z+22	; 0x16
 442:	b7 89       	ldd	r27, Z+23	; 0x17
 444:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
 446:	00 88       	ldd	r0, Z+16	; 0x10
 448:	f1 89       	ldd	r31, Z+17	; 0x11
 44a:	e0 2d       	mov	r30, r0
 44c:	80 81       	ld	r24, Z
 44e:	80 64       	ori	r24, 0x40	; 64
 450:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	08 95       	ret

00000460 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 460:	bf 92       	push	r11
 462:	cf 92       	push	r12
 464:	df 92       	push	r13
 466:	ef 92       	push	r14
 468:	ff 92       	push	r15
 46a:	0f 93       	push	r16
 46c:	1f 93       	push	r17
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	ec 01       	movw	r28, r24
 474:	6a 01       	movw	r12, r20
 476:	7b 01       	movw	r14, r22
 478:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 47a:	e8 89       	ldd	r30, Y+16	; 0x10
 47c:	f9 89       	ldd	r31, Y+17	; 0x11
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 482:	41 15       	cp	r20, r1
 484:	51 4e       	sbci	r21, 0xE1	; 225
 486:	61 05       	cpc	r22, r1
 488:	71 05       	cpc	r23, r1
 48a:	b1 f0       	breq	.+44     	; 0x4b8 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	79 e0       	ldi	r23, 0x09	; 9
 490:	8d e3       	ldi	r24, 0x3D	; 61
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	a7 01       	movw	r20, r14
 496:	96 01       	movw	r18, r12
 498:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodsi4>
 49c:	89 01       	movw	r16, r18
 49e:	9a 01       	movw	r18, r20
 4a0:	01 50       	subi	r16, 0x01	; 1
 4a2:	11 09       	sbc	r17, r1
 4a4:	21 09       	sbc	r18, r1
 4a6:	31 09       	sbc	r19, r1
 4a8:	36 95       	lsr	r19
 4aa:	27 95       	ror	r18
 4ac:	17 95       	ror	r17
 4ae:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 4b0:	01 15       	cp	r16, r1
 4b2:	80 e1       	ldi	r24, 0x10	; 16
 4b4:	18 07       	cpc	r17, r24
 4b6:	a8 f0       	brcs	.+42     	; 0x4e2 <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
 4b8:	e8 89       	ldd	r30, Y+16	; 0x10
 4ba:	f9 89       	ldd	r31, Y+17	; 0x11
 4bc:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 4be:	60 e8       	ldi	r22, 0x80	; 128
 4c0:	74 e8       	ldi	r23, 0x84	; 132
 4c2:	8e e1       	ldi	r24, 0x1E	; 30
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	a7 01       	movw	r20, r14
 4c8:	96 01       	movw	r18, r12
 4ca:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodsi4>
 4ce:	da 01       	movw	r26, r20
 4d0:	c9 01       	movw	r24, r18
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	a1 09       	sbc	r26, r1
 4d6:	b1 09       	sbc	r27, r1
 4d8:	b6 95       	lsr	r27
 4da:	a7 95       	ror	r26
 4dc:	97 95       	ror	r25
 4de:	87 95       	ror	r24
 4e0:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 4e2:	ec 85       	ldd	r30, Y+12	; 0x0c
 4e4:	fd 85       	ldd	r31, Y+13	; 0x0d
 4e6:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
 4e8:	ee 85       	ldd	r30, Y+14	; 0x0e
 4ea:	ff 85       	ldd	r31, Y+15	; 0x0f
 4ec:	00 83       	st	Z, r16

  _written = false;
 4ee:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 4f0:	ec 89       	ldd	r30, Y+20	; 0x14
 4f2:	fd 89       	ldd	r31, Y+21	; 0x15
 4f4:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
 4f6:	ea 89       	ldd	r30, Y+18	; 0x12
 4f8:	fb 89       	ldd	r31, Y+19	; 0x13
 4fa:	80 81       	ld	r24, Z
 4fc:	80 61       	ori	r24, 0x10	; 16
 4fe:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
 500:	ea 89       	ldd	r30, Y+18	; 0x12
 502:	fb 89       	ldd	r31, Y+19	; 0x13
 504:	80 81       	ld	r24, Z
 506:	88 60       	ori	r24, 0x08	; 8
 508:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
 50a:	ea 89       	ldd	r30, Y+18	; 0x12
 50c:	fb 89       	ldd	r31, Y+19	; 0x13
 50e:	80 81       	ld	r24, Z
 510:	80 68       	ori	r24, 0x80	; 128
 512:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
 514:	ea 89       	ldd	r30, Y+18	; 0x12
 516:	fb 89       	ldd	r31, Y+19	; 0x13
 518:	80 81       	ld	r24, Z
 51a:	8f 7d       	andi	r24, 0xDF	; 223
 51c:	80 83       	st	Z, r24
}
 51e:	df 91       	pop	r29
 520:	cf 91       	pop	r28
 522:	1f 91       	pop	r17
 524:	0f 91       	pop	r16
 526:	ff 90       	pop	r15
 528:	ef 90       	pop	r14
 52a:	df 90       	pop	r13
 52c:	cf 90       	pop	r12
 52e:	bf 90       	pop	r11
 530:	08 95       	ret

00000532 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	2f 93       	push	r18
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 54a:	e0 91 76 01 	lds	r30, 0x0176
 54e:	f0 91 77 01 	lds	r31, 0x0177
 552:	80 81       	ld	r24, Z
 554:	82 fd       	sbrc	r24, 2
 556:	14 c0       	rjmp	.+40     	; 0x580 <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 558:	e6 e6       	ldi	r30, 0x66	; 102
 55a:	f1 e0       	ldi	r31, 0x01	; 1
 55c:	a6 89       	ldd	r26, Z+22	; 0x16
 55e:	b7 89       	ldd	r27, Z+23	; 0x17
 560:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 562:	81 8d       	ldd	r24, Z+25	; 0x19
 564:	8f 5f       	subi	r24, 0xFF	; 255
 566:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 568:	92 8d       	ldd	r25, Z+26	; 0x1a
 56a:	89 17       	cp	r24, r25
 56c:	71 f0       	breq	.+28     	; 0x58a <__vector_18+0x58>
      _rx_buffer[_rx_buffer_head] = c;
 56e:	df 01       	movw	r26, r30
 570:	e1 8d       	ldd	r30, Z+25	; 0x19
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	ea 59       	subi	r30, 0x9A	; 154
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
 57a:	59 96       	adiw	r26, 0x19	; 25
 57c:	8c 93       	st	X, r24
 57e:	05 c0       	rjmp	.+10     	; 0x58a <__vector_18+0x58>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 580:	e0 91 7c 01 	lds	r30, 0x017C
 584:	f0 91 7d 01 	lds	r31, 0x017D
 588:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	0f 90       	pop	r0
 59e:	1f 90       	pop	r1
 5a0:	18 95       	reti

000005a2 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
 5c4:	86 e6       	ldi	r24, 0x66	; 102
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 95 01 	call	0x32a	; 0x32a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
 5cc:	ff 91       	pop	r31
 5ce:	ef 91       	pop	r30
 5d0:	bf 91       	pop	r27
 5d2:	af 91       	pop	r26
 5d4:	9f 91       	pop	r25
 5d6:	8f 91       	pop	r24
 5d8:	7f 91       	pop	r23
 5da:	6f 91       	pop	r22
 5dc:	5f 91       	pop	r21
 5de:	4f 91       	pop	r20
 5e0:	3f 91       	pop	r19
 5e2:	2f 91       	pop	r18
 5e4:	0f 90       	pop	r0
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	0f 90       	pop	r0
 5ea:	1f 90       	pop	r1
 5ec:	18 95       	reti

000005ee <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 5ee:	86 e6       	ldi	r24, 0x66	; 102
 5f0:	91 e0       	ldi	r25, 0x01	; 1
 5f2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <_ZN14HardwareSerial9availableEv>
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	89 2b       	or	r24, r25
 5fa:	09 f4       	brne	.+2      	; 0x5fe <_Z17Serial0_availablev+0x10>
 5fc:	20 e0       	ldi	r18, 0x00	; 0
}
 5fe:	82 2f       	mov	r24, r18
 600:	08 95       	ret

00000602 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 602:	e6 e6       	ldi	r30, 0x66	; 102
 604:	f1 e0       	ldi	r31, 0x01	; 1
 606:	13 82       	std	Z+3, r1	; 0x03
 608:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 60a:	88 ee       	ldi	r24, 0xE8	; 232
 60c:	93 e0       	ldi	r25, 0x03	; 3
 60e:	a0 e0       	ldi	r26, 0x00	; 0
 610:	b0 e0       	ldi	r27, 0x00	; 0
 612:	84 83       	std	Z+4, r24	; 0x04
 614:	95 83       	std	Z+5, r25	; 0x05
 616:	a6 83       	std	Z+6, r26	; 0x06
 618:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 61a:	84 e5       	ldi	r24, 0x54	; 84
 61c:	91 e0       	ldi	r25, 0x01	; 1
 61e:	91 83       	std	Z+1, r25	; 0x01
 620:	80 83       	st	Z, r24
 622:	85 ec       	ldi	r24, 0xC5	; 197
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	95 87       	std	Z+13, r25	; 0x0d
 628:	84 87       	std	Z+12, r24	; 0x0c
 62a:	84 ec       	ldi	r24, 0xC4	; 196
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	97 87       	std	Z+15, r25	; 0x0f
 630:	86 87       	std	Z+14, r24	; 0x0e
 632:	80 ec       	ldi	r24, 0xC0	; 192
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	91 8b       	std	Z+17, r25	; 0x11
 638:	80 8b       	std	Z+16, r24	; 0x10
 63a:	81 ec       	ldi	r24, 0xC1	; 193
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	93 8b       	std	Z+19, r25	; 0x13
 640:	82 8b       	std	Z+18, r24	; 0x12
 642:	82 ec       	ldi	r24, 0xC2	; 194
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	95 8b       	std	Z+21, r25	; 0x15
 648:	84 8b       	std	Z+20, r24	; 0x14
 64a:	86 ec       	ldi	r24, 0xC6	; 198
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	97 8b       	std	Z+23, r25	; 0x17
 650:	86 8b       	std	Z+22, r24	; 0x16
 652:	11 8e       	std	Z+25, r1	; 0x19
 654:	12 8e       	std	Z+26, r1	; 0x1a
 656:	13 8e       	std	Z+27, r1	; 0x1b
 658:	14 8e       	std	Z+28, r1	; 0x1c
 65a:	08 95       	ret

0000065c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
 65c:	08 95       	ret

0000065e <_ZNK9IPAddress7printToER5Print>:
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}

size_t IPAddress::printTo(Print& p) const
{
 65e:	8f 92       	push	r8
 660:	9f 92       	push	r9
 662:	af 92       	push	r10
 664:	bf 92       	push	r11
 666:	cf 92       	push	r12
 668:	df 92       	push	r13
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	0f 93       	push	r16
 670:	1f 93       	push	r17
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	5c 01       	movw	r10, r24
 678:	7b 01       	movw	r14, r22
 67a:	4c 01       	movw	r8, r24
 67c:	82 e0       	ldi	r24, 0x02	; 2
 67e:	88 0e       	add	r8, r24
 680:	91 1c       	adc	r9, r1
 682:	65 01       	movw	r12, r10
 684:	e5 e0       	ldi	r30, 0x05	; 5
 686:	ce 0e       	add	r12, r30
 688:	d1 1c       	adc	r13, r1
    size_t n = 0;
 68a:	00 e0       	ldi	r16, 0x00	; 0
 68c:	10 e0       	ldi	r17, 0x00	; 0
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address.bytes[i], DEC);
 68e:	f4 01       	movw	r30, r8
 690:	61 91       	ld	r22, Z+
 692:	4f 01       	movw	r8, r30
 694:	4a e0       	ldi	r20, 0x0A	; 10
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	c7 01       	movw	r24, r14
 69a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN5Print5printEhi>
 69e:	ec 01       	movw	r28, r24
        n += p.print('.');
 6a0:	6e e2       	ldi	r22, 0x2E	; 46
 6a2:	c7 01       	movw	r24, r14
 6a4:	0e 94 cf 03 	call	0x79e	; 0x79e <_ZN5Print5printEc>
 6a8:	8c 0f       	add	r24, r28
 6aa:	9d 1f       	adc	r25, r29
 6ac:	08 0f       	add	r16, r24
 6ae:	19 1f       	adc	r17, r25
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
 6b0:	8c 14       	cp	r8, r12
 6b2:	9d 04       	cpc	r9, r13
 6b4:	61 f7       	brne	.-40     	; 0x68e <_ZNK9IPAddress7printToER5Print+0x30>
    {
        n += p.print(_address.bytes[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address.bytes[3], DEC);
 6b6:	4a e0       	ldi	r20, 0x0A	; 10
 6b8:	50 e0       	ldi	r21, 0x00	; 0
 6ba:	f5 01       	movw	r30, r10
 6bc:	65 81       	ldd	r22, Z+5	; 0x05
 6be:	c7 01       	movw	r24, r14
 6c0:	0e 94 59 04 	call	0x8b2	; 0x8b2 <_ZN5Print5printEhi>
    return n;
}
 6c4:	80 0f       	add	r24, r16
 6c6:	91 1f       	adc	r25, r17
 6c8:	df 91       	pop	r29
 6ca:	cf 91       	pop	r28
 6cc:	1f 91       	pop	r17
 6ce:	0f 91       	pop	r16
 6d0:	ff 90       	pop	r15
 6d2:	ef 90       	pop	r14
 6d4:	df 90       	pop	r13
 6d6:	cf 90       	pop	r12
 6d8:	bf 90       	pop	r11
 6da:	af 90       	pop	r10
 6dc:	9f 90       	pop	r9
 6de:	8f 90       	pop	r8
 6e0:	08 95       	ret

000006e2 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 6e2:	e3 e0       	ldi	r30, 0x03	; 3
 6e4:	f2 e0       	ldi	r31, 0x02	; 2
 6e6:	84 e6       	ldi	r24, 0x64	; 100
 6e8:	91 e0       	ldi	r25, 0x01	; 1
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
 6ee:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
 6f0:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
 6f2:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
 6f4:	15 82       	std	Z+5, r1	; 0x05
 6f6:	08 95       	ret

000006f8 <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 6f8:	08 95       	ret

000006fa <main>:

int main(void)
{
	init();
 6fa:	0e 94 ea 05 	call	0xbd4	; 0xbd4 <init>

	initVariant();
 6fe:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 702:	0e 94 89 00 	call	0x112	; 0x112 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 706:	c7 e8       	ldi	r28, 0x87	; 135
 708:	d1 e0       	ldi	r29, 0x01	; 1
#endif
	
	setup();
    
	for (;;) {
		loop();
 70a:	0e 94 56 01 	call	0x2ac	; 0x2ac <loop>
		if (serialEventRun) serialEventRun();
 70e:	20 97       	sbiw	r28, 0x00	; 0
 710:	e1 f3       	breq	.-8      	; 0x70a <main+0x10>
 712:	0e 94 87 01 	call	0x30e	; 0x30e <_Z14serialEventRunv>
 716:	f9 cf       	rjmp	.-14     	; 0x70a <main+0x10>

00000718 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 718:	cf 92       	push	r12
 71a:	df 92       	push	r13
 71c:	ef 92       	push	r14
 71e:	ff 92       	push	r15
 720:	0f 93       	push	r16
 722:	1f 93       	push	r17
 724:	cf 93       	push	r28
 726:	df 93       	push	r29
  size_t n = 0;
  while (size--) {
 728:	41 15       	cp	r20, r1
 72a:	51 05       	cpc	r21, r1
 72c:	b1 f0       	breq	.+44     	; 0x75a <_ZN5Print5writeEPKhj+0x42>
 72e:	8c 01       	movw	r16, r24
 730:	e6 2e       	mov	r14, r22
 732:	f7 2e       	mov	r15, r23
 734:	ea 01       	movw	r28, r20
 736:	c1 2c       	mov	r12, r1
 738:	d1 2c       	mov	r13, r1
    n += write(*buffer++);
 73a:	d7 01       	movw	r26, r14
 73c:	6d 91       	ld	r22, X+
 73e:	7d 01       	movw	r14, r26
 740:	d8 01       	movw	r26, r16
 742:	ed 91       	ld	r30, X+
 744:	fc 91       	ld	r31, X
 746:	01 90       	ld	r0, Z+
 748:	f0 81       	ld	r31, Z
 74a:	e0 2d       	mov	r30, r0
 74c:	c8 01       	movw	r24, r16
 74e:	09 95       	icall
 750:	c8 0e       	add	r12, r24
 752:	d9 1e       	adc	r13, r25
 754:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 756:	89 f7       	brne	.-30     	; 0x73a <_ZN5Print5writeEPKhj+0x22>
 758:	02 c0       	rjmp	.+4      	; 0x75e <_ZN5Print5writeEPKhj+0x46>
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
 75a:	c1 2c       	mov	r12, r1
 75c:	d1 2c       	mov	r13, r1
  while (size--) {
    n += write(*buffer++);
  }
  return n;
}
 75e:	c6 01       	movw	r24, r12
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	1f 91       	pop	r17
 766:	0f 91       	pop	r16
 768:	ff 90       	pop	r15
 76a:	ef 90       	pop	r14
 76c:	df 90       	pop	r13
 76e:	cf 90       	pop	r12
 770:	08 95       	ret

00000772 <_ZN5Print5printEPKc>:
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 772:	61 15       	cp	r22, r1
 774:	71 05       	cpc	r23, r1
 776:	81 f0       	breq	.+32     	; 0x798 <_ZN5Print5printEPKc+0x26>
      return write((const uint8_t *)str, strlen(str));
 778:	fb 01       	movw	r30, r22
 77a:	01 90       	ld	r0, Z+
 77c:	00 20       	and	r0, r0
 77e:	e9 f7       	brne	.-6      	; 0x77a <_ZN5Print5printEPKc+0x8>
 780:	31 97       	sbiw	r30, 0x01	; 1
 782:	af 01       	movw	r20, r30
 784:	46 1b       	sub	r20, r22
 786:	57 0b       	sbc	r21, r23
 788:	dc 01       	movw	r26, r24
 78a:	ed 91       	ld	r30, X+
 78c:	fc 91       	ld	r31, X
 78e:	02 80       	ldd	r0, Z+2	; 0x02
 790:	f3 81       	ldd	r31, Z+3	; 0x03
 792:	e0 2d       	mov	r30, r0
 794:	09 95       	icall
 796:	08 95       	ret
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
}

size_t Print::print(const char str[])
{
  return write(str);
}
 79c:	08 95       	ret

0000079e <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 79e:	dc 01       	movw	r26, r24
 7a0:	ed 91       	ld	r30, X+
 7a2:	fc 91       	ld	r31, X
 7a4:	01 90       	ld	r0, Z+
 7a6:	f0 81       	ld	r31, Z
 7a8:	e0 2d       	mov	r30, r0
 7aa:	09 95       	icall
}
 7ac:	08 95       	ret

000007ae <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 7ae:	4f 92       	push	r4
 7b0:	5f 92       	push	r5
 7b2:	6f 92       	push	r6
 7b4:	7f 92       	push	r7
 7b6:	9f 92       	push	r9
 7b8:	af 92       	push	r10
 7ba:	bf 92       	push	r11
 7bc:	cf 92       	push	r12
 7be:	df 92       	push	r13
 7c0:	ef 92       	push	r14
 7c2:	ff 92       	push	r15
 7c4:	0f 93       	push	r16
 7c6:	1f 93       	push	r17
 7c8:	cf 93       	push	r28
 7ca:	df 93       	push	r29
 7cc:	cd b7       	in	r28, 0x3d	; 61
 7ce:	de b7       	in	r29, 0x3e	; 62
 7d0:	a1 97       	sbiw	r28, 0x21	; 33
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	f8 94       	cli
 7d6:	de bf       	out	0x3e, r29	; 62
 7d8:	0f be       	out	0x3f, r0	; 63
 7da:	cd bf       	out	0x3d, r28	; 61
 7dc:	5c 01       	movw	r10, r24
 7de:	6a 01       	movw	r12, r20
 7e0:	7b 01       	movw	r14, r22
 7e2:	92 2e       	mov	r9, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 7e4:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 7e6:	81 e0       	ldi	r24, 0x01	; 1
 7e8:	82 17       	cp	r24, r18
 7ea:	20 f0       	brcs	.+8      	; 0x7f4 <_ZN5Print11printNumberEmh+0x46>
 7ec:	0f 2e       	mov	r0, r31
 7ee:	fa e0       	ldi	r31, 0x0A	; 10
 7f0:	9f 2e       	mov	r9, r31
 7f2:	f0 2d       	mov	r31, r0
 7f4:	8e 01       	movw	r16, r28
 7f6:	0f 5d       	subi	r16, 0xDF	; 223
 7f8:	1f 4f       	sbci	r17, 0xFF	; 255

  do {
    unsigned long m = n;
    n /= base;
 7fa:	49 2c       	mov	r4, r9
 7fc:	51 2c       	mov	r5, r1
 7fe:	61 2c       	mov	r6, r1
 800:	71 2c       	mov	r7, r1
 802:	c7 01       	movw	r24, r14
 804:	b6 01       	movw	r22, r12
 806:	a3 01       	movw	r20, r6
 808:	92 01       	movw	r18, r4
 80a:	0e 94 08 07 	call	0xe10	; 0xe10 <__udivmodsi4>
    char c = m - base * n;
 80e:	8c 2d       	mov	r24, r12
 810:	92 9e       	mul	r9, r18
 812:	80 19       	sub	r24, r0
 814:	11 24       	eor	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 816:	01 50       	subi	r16, 0x01	; 1
 818:	11 09       	sbc	r17, r1
 81a:	8a 30       	cpi	r24, 0x0A	; 10
 81c:	10 f4       	brcc	.+4      	; 0x822 <_ZN5Print11printNumberEmh+0x74>
 81e:	80 5d       	subi	r24, 0xD0	; 208
 820:	01 c0       	rjmp	.+2      	; 0x824 <_ZN5Print11printNumberEmh+0x76>
 822:	89 5c       	subi	r24, 0xC9	; 201
 824:	d8 01       	movw	r26, r16
 826:	8c 93       	st	X, r24
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 828:	c2 2e       	mov	r12, r18
 82a:	d3 2e       	mov	r13, r19
 82c:	e4 2e       	mov	r14, r20
 82e:	f5 2e       	mov	r15, r21
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 830:	c1 14       	cp	r12, r1
 832:	d1 04       	cpc	r13, r1
 834:	e1 04       	cpc	r14, r1
 836:	f1 04       	cpc	r15, r1
 838:	21 f7       	brne	.-56     	; 0x802 <_ZN5Print11printNumberEmh+0x54>
 83a:	01 15       	cp	r16, r1
 83c:	11 05       	cpc	r17, r1
 83e:	91 f0       	breq	.+36     	; 0x864 <_ZN5Print11printNumberEmh+0xb6>
      return write((const uint8_t *)str, strlen(str));
 840:	f8 01       	movw	r30, r16
 842:	01 90       	ld	r0, Z+
 844:	00 20       	and	r0, r0
 846:	e9 f7       	brne	.-6      	; 0x842 <_ZN5Print11printNumberEmh+0x94>
 848:	31 97       	sbiw	r30, 0x01	; 1
 84a:	af 01       	movw	r20, r30
 84c:	40 1b       	sub	r20, r16
 84e:	51 0b       	sbc	r21, r17
 850:	d5 01       	movw	r26, r10
 852:	ed 91       	ld	r30, X+
 854:	fc 91       	ld	r31, X
 856:	02 80       	ldd	r0, Z+2	; 0x02
 858:	f3 81       	ldd	r31, Z+3	; 0x03
 85a:	e0 2d       	mov	r30, r0
 85c:	b8 01       	movw	r22, r16
 85e:	c5 01       	movw	r24, r10
 860:	09 95       	icall
 862:	02 c0       	rjmp	.+4      	; 0x868 <_ZN5Print11printNumberEmh+0xba>
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	90 e0       	ldi	r25, 0x00	; 0
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
 868:	a1 96       	adiw	r28, 0x21	; 33
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	f8 94       	cli
 86e:	de bf       	out	0x3e, r29	; 62
 870:	0f be       	out	0x3f, r0	; 63
 872:	cd bf       	out	0x3d, r28	; 61
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	ff 90       	pop	r15
 87e:	ef 90       	pop	r14
 880:	df 90       	pop	r13
 882:	cf 90       	pop	r12
 884:	bf 90       	pop	r11
 886:	af 90       	pop	r10
 888:	9f 90       	pop	r9
 88a:	7f 90       	pop	r7
 88c:	6f 90       	pop	r6
 88e:	5f 90       	pop	r5
 890:	4f 90       	pop	r4
 892:	08 95       	ret

00000894 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 894:	21 15       	cp	r18, r1
 896:	31 05       	cpc	r19, r1
 898:	49 f4       	brne	.+18     	; 0x8ac <_ZN5Print5printEmi+0x18>
 89a:	dc 01       	movw	r26, r24
 89c:	ed 91       	ld	r30, X+
 89e:	fc 91       	ld	r31, X
 8a0:	01 90       	ld	r0, Z+
 8a2:	f0 81       	ld	r31, Z
 8a4:	e0 2d       	mov	r30, r0
 8a6:	64 2f       	mov	r22, r20
 8a8:	09 95       	icall
 8aa:	08 95       	ret
  else return printNumber(n, base);
 8ac:	0e 94 d7 03 	call	0x7ae	; 0x7ae <_ZN5Print11printNumberEmh>
}
 8b0:	08 95       	ret

000008b2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
 8b2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
 8b4:	46 2f       	mov	r20, r22
 8b6:	50 e0       	ldi	r21, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	70 e0       	ldi	r23, 0x00	; 0
 8bc:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN5Print5printEmi>
}
 8c0:	08 95       	ret

000008c2 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	39 f0       	breq	.+14     	; 0x8d4 <_Z12disableTimerh+0x12>
 8c6:	18 f0       	brcs	.+6      	; 0x8ce <_Z12disableTimerh+0xc>
 8c8:	82 30       	cpi	r24, 0x02	; 2
 8ca:	51 f0       	breq	.+20     	; 0x8e0 <_Z12disableTimerh+0x1e>
 8cc:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
 8ce:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
 8d2:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 8d4:	ef e6       	ldi	r30, 0x6F	; 111
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	8d 7f       	andi	r24, 0xFD	; 253
 8dc:	80 83       	st	Z, r24
      break;
 8de:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 8e0:	e0 e7       	ldi	r30, 0x70	; 112
 8e2:	f0 e0       	ldi	r31, 0x00	; 0
 8e4:	80 81       	ld	r24, Z
 8e6:	8d 7f       	andi	r24, 0xFD	; 253
 8e8:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 8f0:	e1 eb       	ldi	r30, 0xB1	; 177
 8f2:	f0 e0       	ldi	r31, 0x00	; 0
 8f4:	80 81       	ld	r24, Z
 8f6:	88 7f       	andi	r24, 0xF8	; 248
 8f8:	84 60       	ori	r24, 0x04	; 4
 8fa:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
 8fc:	10 92 b3 00 	sts	0x00B3, r1
 900:	08 95       	ret

00000902 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
 902:	cf 93       	push	r28
 904:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
 906:	80 91 40 01 	lds	r24, 0x0140
 90a:	8c 13       	cpse	r24, r28
 90c:	08 c0       	rjmp	.+16     	; 0x91e <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 90e:	e8 e6       	ldi	r30, 0x68	; 104
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	e4 91       	lpm	r30, Z
 914:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
 916:	9f ef       	ldi	r25, 0xFF	; 255
 918:	90 93 40 01 	sts	0x0140, r25
 91c:	01 c0       	rjmp	.+2      	; 0x920 <_Z6noToneh+0x1e>
 91e:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
 920:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_Z12disableTimerh>

  digitalWrite(_pin, 0);
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	8c 2f       	mov	r24, r28
 928:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
}
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <__vector_7>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	2f 93       	push	r18
 93c:	3f 93       	push	r19
 93e:	4f 93       	push	r20
 940:	5f 93       	push	r21
 942:	6f 93       	push	r22
 944:	7f 93       	push	r23
 946:	8f 93       	push	r24
 948:	9f 93       	push	r25
 94a:	af 93       	push	r26
 94c:	bf 93       	push	r27
 94e:	ef 93       	push	r30
 950:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
 952:	80 91 0c 02 	lds	r24, 0x020C
 956:	90 91 0d 02 	lds	r25, 0x020D
 95a:	a0 91 0e 02 	lds	r26, 0x020E
 95e:	b0 91 0f 02 	lds	r27, 0x020F
 962:	89 2b       	or	r24, r25
 964:	8a 2b       	or	r24, r26
 966:	8b 2b       	or	r24, r27
 968:	51 f1       	breq	.+84     	; 0x9be <__vector_7+0x8e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 96a:	80 91 09 02 	lds	r24, 0x0209
 96e:	e0 91 0a 02 	lds	r30, 0x020A
 972:	f0 91 0b 02 	lds	r31, 0x020B
 976:	90 81       	ld	r25, Z
 978:	89 27       	eor	r24, r25
 97a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
 97c:	80 91 0c 02 	lds	r24, 0x020C
 980:	90 91 0d 02 	lds	r25, 0x020D
 984:	a0 91 0e 02 	lds	r26, 0x020E
 988:	b0 91 0f 02 	lds	r27, 0x020F
 98c:	18 16       	cp	r1, r24
 98e:	19 06       	cpc	r1, r25
 990:	1a 06       	cpc	r1, r26
 992:	1b 06       	cpc	r1, r27
 994:	c4 f4       	brge	.+48     	; 0x9c6 <__vector_7+0x96>
      timer2_toggle_count--;
 996:	80 91 0c 02 	lds	r24, 0x020C
 99a:	90 91 0d 02 	lds	r25, 0x020D
 99e:	a0 91 0e 02 	lds	r26, 0x020E
 9a2:	b0 91 0f 02 	lds	r27, 0x020F
 9a6:	01 97       	sbiw	r24, 0x01	; 1
 9a8:	a1 09       	sbc	r26, r1
 9aa:	b1 09       	sbc	r27, r1
 9ac:	80 93 0c 02 	sts	0x020C, r24
 9b0:	90 93 0d 02 	sts	0x020D, r25
 9b4:	a0 93 0e 02 	sts	0x020E, r26
 9b8:	b0 93 0f 02 	sts	0x020F, r27
 9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__vector_7+0x96>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
 9be:	80 91 40 01 	lds	r24, 0x0140
 9c2:	0e 94 81 04 	call	0x902	; 0x902 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
 9c6:	ff 91       	pop	r31
 9c8:	ef 91       	pop	r30
 9ca:	bf 91       	pop	r27
 9cc:	af 91       	pop	r26
 9ce:	9f 91       	pop	r25
 9d0:	8f 91       	pop	r24
 9d2:	7f 91       	pop	r23
 9d4:	6f 91       	pop	r22
 9d6:	5f 91       	pop	r21
 9d8:	4f 91       	pop	r20
 9da:	3f 91       	pop	r19
 9dc:	2f 91       	pop	r18
 9de:	0f 90       	pop	r0
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	0f 90       	pop	r0
 9e4:	1f 90       	pop	r1
 9e6:	18 95       	reti

000009e8 <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

ISR(INT0_vect) {
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	ef 93       	push	r30
 a08:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
 a0a:	80 91 10 02 	lds	r24, 0x0210
 a0e:	90 91 11 02 	lds	r25, 0x0211
 a12:	89 2b       	or	r24, r25
 a14:	29 f0       	breq	.+10     	; 0xa20 <__vector_1+0x38>
    intFunc[EXTERNAL_INT_0]();
 a16:	e0 91 10 02 	lds	r30, 0x0210
 a1a:	f0 91 11 02 	lds	r31, 0x0211
 a1e:	09 95       	icall
}
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <__vector_2>:

ISR(INT1_vect) {
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
 a64:	80 91 12 02 	lds	r24, 0x0212
 a68:	90 91 13 02 	lds	r25, 0x0213
 a6c:	89 2b       	or	r24, r25
 a6e:	29 f0       	breq	.+10     	; 0xa7a <__vector_2+0x38>
    intFunc[EXTERNAL_INT_1]();
 a70:	e0 91 12 02 	lds	r30, 0x0212
 a74:	f0 91 13 02 	lds	r31, 0x0213
 a78:	09 95       	icall
}
 a7a:	ff 91       	pop	r31
 a7c:	ef 91       	pop	r30
 a7e:	bf 91       	pop	r27
 a80:	af 91       	pop	r26
 a82:	9f 91       	pop	r25
 a84:	8f 91       	pop	r24
 a86:	7f 91       	pop	r23
 a88:	6f 91       	pop	r22
 a8a:	5f 91       	pop	r21
 a8c:	4f 91       	pop	r20
 a8e:	3f 91       	pop	r19
 a90:	2f 91       	pop	r18
 a92:	0f 90       	pop	r0
 a94:	0f be       	out	0x3f, r0	; 63
 a96:	0f 90       	pop	r0
 a98:	1f 90       	pop	r1
 a9a:	18 95       	reti

00000a9c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 a9c:	1f 92       	push	r1
 a9e:	0f 92       	push	r0
 aa0:	0f b6       	in	r0, 0x3f	; 63
 aa2:	0f 92       	push	r0
 aa4:	11 24       	eor	r1, r1
 aa6:	2f 93       	push	r18
 aa8:	3f 93       	push	r19
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
 aae:	af 93       	push	r26
 ab0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 ab2:	80 91 15 02 	lds	r24, 0x0215
 ab6:	90 91 16 02 	lds	r25, 0x0216
 aba:	a0 91 17 02 	lds	r26, 0x0217
 abe:	b0 91 18 02 	lds	r27, 0x0218
	unsigned char f = timer0_fract;
 ac2:	30 91 14 02 	lds	r19, 0x0214

	m += MILLIS_INC;
	f += FRACT_INC;
 ac6:	23 e0       	ldi	r18, 0x03	; 3
 ac8:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 aca:	2d 37       	cpi	r18, 0x7D	; 125
 acc:	20 f4       	brcc	.+8      	; 0xad6 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 ace:	01 96       	adiw	r24, 0x01	; 1
 ad0:	a1 1d       	adc	r26, r1
 ad2:	b1 1d       	adc	r27, r1
 ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 ad6:	26 e8       	ldi	r18, 0x86	; 134
 ad8:	23 0f       	add	r18, r19
		m += 1;
 ada:	02 96       	adiw	r24, 0x02	; 2
 adc:	a1 1d       	adc	r26, r1
 ade:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 ae0:	20 93 14 02 	sts	0x0214, r18
	timer0_millis = m;
 ae4:	80 93 15 02 	sts	0x0215, r24
 ae8:	90 93 16 02 	sts	0x0216, r25
 aec:	a0 93 17 02 	sts	0x0217, r26
 af0:	b0 93 18 02 	sts	0x0218, r27
	timer0_overflow_count++;
 af4:	80 91 19 02 	lds	r24, 0x0219
 af8:	90 91 1a 02 	lds	r25, 0x021A
 afc:	a0 91 1b 02 	lds	r26, 0x021B
 b00:	b0 91 1c 02 	lds	r27, 0x021C
 b04:	01 96       	adiw	r24, 0x01	; 1
 b06:	a1 1d       	adc	r26, r1
 b08:	b1 1d       	adc	r27, r1
 b0a:	80 93 19 02 	sts	0x0219, r24
 b0e:	90 93 1a 02 	sts	0x021A, r25
 b12:	a0 93 1b 02 	sts	0x021B, r26
 b16:	b0 93 1c 02 	sts	0x021C, r27
}
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	3f 91       	pop	r19
 b24:	2f 91       	pop	r18
 b26:	0f 90       	pop	r0
 b28:	0f be       	out	0x3f, r0	; 63
 b2a:	0f 90       	pop	r0
 b2c:	1f 90       	pop	r1
 b2e:	18 95       	reti

00000b30 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 b30:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 b32:	f8 94       	cli
	m = timer0_overflow_count;
 b34:	80 91 19 02 	lds	r24, 0x0219
 b38:	90 91 1a 02 	lds	r25, 0x021A
 b3c:	a0 91 1b 02 	lds	r26, 0x021B
 b40:	b0 91 1c 02 	lds	r27, 0x021C
#if defined(TCNT0)
	t = TCNT0;
 b44:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 b46:	a8 9b       	sbis	0x15, 0	; 21
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <micros+0x24>
 b4a:	2f 3f       	cpi	r18, 0xFF	; 255
 b4c:	19 f0       	breq	.+6      	; 0xb54 <micros+0x24>
		m++;
 b4e:	01 96       	adiw	r24, 0x01	; 1
 b50:	a1 1d       	adc	r26, r1
 b52:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 b54:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 b56:	ba 2f       	mov	r27, r26
 b58:	a9 2f       	mov	r26, r25
 b5a:	98 2f       	mov	r25, r24
 b5c:	88 27       	eor	r24, r24
 b5e:	82 0f       	add	r24, r18
 b60:	91 1d       	adc	r25, r1
 b62:	a1 1d       	adc	r26, r1
 b64:	b1 1d       	adc	r27, r1
 b66:	bc 01       	movw	r22, r24
 b68:	cd 01       	movw	r24, r26
 b6a:	66 0f       	add	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	88 1f       	adc	r24, r24
 b70:	99 1f       	adc	r25, r25
 b72:	66 0f       	add	r22, r22
 b74:	77 1f       	adc	r23, r23
 b76:	88 1f       	adc	r24, r24
 b78:	99 1f       	adc	r25, r25
}
 b7a:	08 95       	ret

00000b7c <delay>:

void delay(unsigned long ms)
{
 b7c:	cf 92       	push	r12
 b7e:	df 92       	push	r13
 b80:	ef 92       	push	r14
 b82:	ff 92       	push	r15
 b84:	cf 93       	push	r28
 b86:	df 93       	push	r29
 b88:	6b 01       	movw	r12, r22
 b8a:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
 b8c:	0e 94 98 05 	call	0xb30	; 0xb30 <micros>
 b90:	eb 01       	movw	r28, r22

	while (ms > 0) {
 b92:	c1 14       	cp	r12, r1
 b94:	d1 04       	cpc	r13, r1
 b96:	e1 04       	cpc	r14, r1
 b98:	f1 04       	cpc	r15, r1
 b9a:	a9 f0       	breq	.+42     	; 0xbc6 <delay+0x4a>
		yield();
 b9c:	0e 94 2e 03 	call	0x65c	; 0x65c <yield>
		if (((uint16_t)micros() - start) >= 1000) {
 ba0:	0e 94 98 05 	call	0xb30	; 0xb30 <micros>
 ba4:	6c 1b       	sub	r22, r28
 ba6:	7d 0b       	sbc	r23, r29
 ba8:	68 3e       	cpi	r22, 0xE8	; 232
 baa:	73 40       	sbci	r23, 0x03	; 3
 bac:	38 f0       	brcs	.+14     	; 0xbbc <delay+0x40>
			ms--;
 bae:	81 e0       	ldi	r24, 0x01	; 1
 bb0:	c8 1a       	sub	r12, r24
 bb2:	d1 08       	sbc	r13, r1
 bb4:	e1 08       	sbc	r14, r1
 bb6:	f1 08       	sbc	r15, r1
			start += 1000;
 bb8:	c8 51       	subi	r28, 0x18	; 24
 bba:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 bbc:	c1 14       	cp	r12, r1
 bbe:	d1 04       	cpc	r13, r1
 bc0:	e1 04       	cpc	r14, r1
 bc2:	f1 04       	cpc	r15, r1
 bc4:	59 f7       	brne	.-42     	; 0xb9c <delay+0x20>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 bc6:	df 91       	pop	r29
 bc8:	cf 91       	pop	r28
 bca:	ff 90       	pop	r15
 bcc:	ef 90       	pop	r14
 bce:	df 90       	pop	r13
 bd0:	cf 90       	pop	r12
 bd2:	08 95       	ret

00000bd4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 bd4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 bd6:	84 b5       	in	r24, 0x24	; 36
 bd8:	82 60       	ori	r24, 0x02	; 2
 bda:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 bdc:	84 b5       	in	r24, 0x24	; 36
 bde:	81 60       	ori	r24, 0x01	; 1
 be0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 be2:	85 b5       	in	r24, 0x25	; 37
 be4:	82 60       	ori	r24, 0x02	; 2
 be6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 be8:	85 b5       	in	r24, 0x25	; 37
 bea:	81 60       	ori	r24, 0x01	; 1
 bec:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 bee:	ee e6       	ldi	r30, 0x6E	; 110
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	80 81       	ld	r24, Z
 bf4:	81 60       	ori	r24, 0x01	; 1
 bf6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 bf8:	e1 e8       	ldi	r30, 0x81	; 129
 bfa:	f0 e0       	ldi	r31, 0x00	; 0
 bfc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 bfe:	80 81       	ld	r24, Z
 c00:	82 60       	ori	r24, 0x02	; 2
 c02:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 c04:	80 81       	ld	r24, Z
 c06:	81 60       	ori	r24, 0x01	; 1
 c08:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 c0a:	e0 e8       	ldi	r30, 0x80	; 128
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	80 81       	ld	r24, Z
 c10:	81 60       	ori	r24, 0x01	; 1
 c12:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 c14:	e1 eb       	ldi	r30, 0xB1	; 177
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	80 81       	ld	r24, Z
 c1a:	84 60       	ori	r24, 0x04	; 4
 c1c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 c1e:	e0 eb       	ldi	r30, 0xB0	; 176
 c20:	f0 e0       	ldi	r31, 0x00	; 0
 c22:	80 81       	ld	r24, Z
 c24:	81 60       	ori	r24, 0x01	; 1
 c26:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 c28:	ea e7       	ldi	r30, 0x7A	; 122
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	80 81       	ld	r24, Z
 c2e:	84 60       	ori	r24, 0x04	; 4
 c30:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
 c32:	80 81       	ld	r24, Z
 c34:	82 60       	ori	r24, 0x02	; 2
 c36:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
 c38:	80 81       	ld	r24, Z
 c3a:	81 60       	ori	r24, 0x01	; 1
 c3c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 c3e:	80 81       	ld	r24, Z
 c40:	80 68       	ori	r24, 0x80	; 128
 c42:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 c44:	10 92 c1 00 	sts	0x00C1, r1
 c48:	08 95       	ret

00000c4a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 c4a:	83 30       	cpi	r24, 0x03	; 3
 c4c:	69 f0       	breq	.+26     	; 0xc68 <turnOffPWM+0x1e>
 c4e:	28 f4       	brcc	.+10     	; 0xc5a <turnOffPWM+0x10>
 c50:	81 30       	cpi	r24, 0x01	; 1
 c52:	b1 f0       	breq	.+44     	; 0xc80 <turnOffPWM+0x36>
 c54:	82 30       	cpi	r24, 0x02	; 2
 c56:	c1 f0       	breq	.+48     	; 0xc88 <turnOffPWM+0x3e>
 c58:	08 95       	ret
 c5a:	87 30       	cpi	r24, 0x07	; 7
 c5c:	c9 f0       	breq	.+50     	; 0xc90 <turnOffPWM+0x46>
 c5e:	88 30       	cpi	r24, 0x08	; 8
 c60:	e9 f0       	breq	.+58     	; 0xc9c <turnOffPWM+0x52>
 c62:	84 30       	cpi	r24, 0x04	; 4
 c64:	01 f5       	brne	.+64     	; 0xca6 <turnOffPWM+0x5c>
 c66:	06 c0       	rjmp	.+12     	; 0xc74 <turnOffPWM+0x2a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 c68:	e0 e8       	ldi	r30, 0x80	; 128
 c6a:	f0 e0       	ldi	r31, 0x00	; 0
 c6c:	80 81       	ld	r24, Z
 c6e:	8f 77       	andi	r24, 0x7F	; 127
 c70:	80 83       	st	Z, r24
 c72:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 c74:	e0 e8       	ldi	r30, 0x80	; 128
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	80 81       	ld	r24, Z
 c7a:	8f 7d       	andi	r24, 0xDF	; 223
 c7c:	80 83       	st	Z, r24
 c7e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 c80:	84 b5       	in	r24, 0x24	; 36
 c82:	8f 77       	andi	r24, 0x7F	; 127
 c84:	84 bd       	out	0x24, r24	; 36
 c86:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 c88:	84 b5       	in	r24, 0x24	; 36
 c8a:	8f 7d       	andi	r24, 0xDF	; 223
 c8c:	84 bd       	out	0x24, r24	; 36
 c8e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 c90:	e0 eb       	ldi	r30, 0xB0	; 176
 c92:	f0 e0       	ldi	r31, 0x00	; 0
 c94:	80 81       	ld	r24, Z
 c96:	8f 77       	andi	r24, 0x7F	; 127
 c98:	80 83       	st	Z, r24
 c9a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 c9c:	e0 eb       	ldi	r30, 0xB0	; 176
 c9e:	f0 e0       	ldi	r31, 0x00	; 0
 ca0:	80 81       	ld	r24, Z
 ca2:	8f 7d       	andi	r24, 0xDF	; 223
 ca4:	80 83       	st	Z, r24
 ca6:	08 95       	ret

00000ca8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 ca8:	cf 93       	push	r28
 caa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	fc 01       	movw	r30, r24
 cb0:	e3 58       	subi	r30, 0x83	; 131
 cb2:	ff 4f       	sbci	r31, 0xFF	; 255
 cb4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
 cb6:	fc 01       	movw	r30, r24
 cb8:	ef 56       	subi	r30, 0x6F	; 111
 cba:	ff 4f       	sbci	r31, 0xFF	; 255
 cbc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 cbe:	88 23       	and	r24, r24
 cc0:	79 f1       	breq	.+94     	; 0xd20 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	88 0f       	add	r24, r24
 cc6:	99 1f       	adc	r25, r25
 cc8:	fc 01       	movw	r30, r24
 cca:	e1 55       	subi	r30, 0x51	; 81
 ccc:	ff 4f       	sbci	r31, 0xFF	; 255
 cce:	a5 91       	lpm	r26, Z+
 cd0:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 cd2:	fc 01       	movw	r30, r24
 cd4:	eb 55       	subi	r30, 0x5B	; 91
 cd6:	ff 4f       	sbci	r31, 0xFF	; 255
 cd8:	c5 91       	lpm	r28, Z+
 cda:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
 cdc:	61 11       	cpse	r22, r1
 cde:	0c c0       	rjmp	.+24     	; 0xcf8 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 ce0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 ce2:	f8 94       	cli
		*reg &= ~bit;
 ce4:	8c 91       	ld	r24, X
 ce6:	e2 2f       	mov	r30, r18
 ce8:	e0 95       	com	r30
 cea:	8e 23       	and	r24, r30
 cec:	8c 93       	st	X, r24
		*out &= ~bit;
 cee:	28 81       	ld	r18, Y
 cf0:	e2 23       	and	r30, r18
 cf2:	e8 83       	st	Y, r30
		SREG = oldSREG;
 cf4:	9f bf       	out	0x3f, r25	; 63
 cf6:	14 c0       	rjmp	.+40     	; 0xd20 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
 cf8:	62 30       	cpi	r22, 0x02	; 2
 cfa:	61 f4       	brne	.+24     	; 0xd14 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 cfc:	9f b7       	in	r25, 0x3f	; 63
                cli();
 cfe:	f8 94       	cli
		*reg &= ~bit;
 d00:	3c 91       	ld	r19, X
 d02:	82 2f       	mov	r24, r18
 d04:	80 95       	com	r24
 d06:	83 23       	and	r24, r19
 d08:	8c 93       	st	X, r24
		*out |= bit;
 d0a:	e8 81       	ld	r30, Y
 d0c:	e2 2b       	or	r30, r18
 d0e:	e8 83       	st	Y, r30
		SREG = oldSREG;
 d10:	9f bf       	out	0x3f, r25	; 63
 d12:	06 c0       	rjmp	.+12     	; 0xd20 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 d14:	8f b7       	in	r24, 0x3f	; 63
                cli();
 d16:	f8 94       	cli
		*reg |= bit;
 d18:	ec 91       	ld	r30, X
 d1a:	e2 2b       	or	r30, r18
 d1c:	ec 93       	st	X, r30
		SREG = oldSREG;
 d1e:	8f bf       	out	0x3f, r24	; 63
	}
}
 d20:	df 91       	pop	r29
 d22:	cf 91       	pop	r28
 d24:	08 95       	ret

00000d26 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 d26:	1f 93       	push	r17
 d28:	cf 93       	push	r28
 d2a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
 d2c:	28 2f       	mov	r18, r24
 d2e:	30 e0       	ldi	r19, 0x00	; 0
 d30:	f9 01       	movw	r30, r18
 d32:	e7 59       	subi	r30, 0x97	; 151
 d34:	ff 4f       	sbci	r31, 0xFF	; 255
 d36:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
 d38:	f9 01       	movw	r30, r18
 d3a:	e3 58       	subi	r30, 0x83	; 131
 d3c:	ff 4f       	sbci	r31, 0xFF	; 255
 d3e:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
 d40:	f9 01       	movw	r30, r18
 d42:	ef 56       	subi	r30, 0x6F	; 111
 d44:	ff 4f       	sbci	r31, 0xFF	; 255
 d46:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 d48:	cc 23       	and	r28, r28
 d4a:	d1 f0       	breq	.+52     	; 0xd80 <digitalWrite+0x5a>
 d4c:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 d4e:	81 11       	cpse	r24, r1
 d50:	0e 94 25 06 	call	0xc4a	; 0xc4a <turnOffPWM>

	out = portOutputRegister(port);
 d54:	ec 2f       	mov	r30, r28
 d56:	f0 e0       	ldi	r31, 0x00	; 0
 d58:	ee 0f       	add	r30, r30
 d5a:	ff 1f       	adc	r31, r31
 d5c:	eb 55       	subi	r30, 0x5B	; 91
 d5e:	ff 4f       	sbci	r31, 0xFF	; 255
 d60:	a5 91       	lpm	r26, Z+
 d62:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 d64:	8f b7       	in	r24, 0x3f	; 63
	cli();
 d66:	f8 94       	cli

	if (val == LOW) {
 d68:	d1 11       	cpse	r29, r1
 d6a:	06 c0       	rjmp	.+12     	; 0xd78 <digitalWrite+0x52>
		*out &= ~bit;
 d6c:	9c 91       	ld	r25, X
 d6e:	e1 2f       	mov	r30, r17
 d70:	e0 95       	com	r30
 d72:	e9 23       	and	r30, r25
 d74:	ec 93       	st	X, r30
 d76:	03 c0       	rjmp	.+6      	; 0xd7e <digitalWrite+0x58>
	} else {
		*out |= bit;
 d78:	ec 91       	ld	r30, X
 d7a:	e1 2b       	or	r30, r17
 d7c:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
 d7e:	8f bf       	out	0x3f, r24	; 63
}
 d80:	df 91       	pop	r29
 d82:	cf 91       	pop	r28
 d84:	1f 91       	pop	r17
 d86:	08 95       	ret

00000d88 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 d88:	bf 92       	push	r11
 d8a:	cf 92       	push	r12
 d8c:	df 92       	push	r13
 d8e:	ef 92       	push	r14
 d90:	ff 92       	push	r15
 d92:	0f 93       	push	r16
 d94:	1f 93       	push	r17
 d96:	cf 93       	push	r28
 d98:	df 93       	push	r29
 d9a:	b8 2e       	mov	r11, r24
 d9c:	16 2f       	mov	r17, r22
 d9e:	04 2f       	mov	r16, r20
 da0:	c7 e0       	ldi	r28, 0x07	; 7
 da2:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 da4:	e2 2e       	mov	r14, r18
 da6:	f1 2c       	mov	r15, r1
 da8:	0f 2e       	mov	r0, r31
 daa:	f7 e0       	ldi	r31, 0x07	; 7
 dac:	cf 2e       	mov	r12, r31
 dae:	d1 2c       	mov	r13, r1
 db0:	f0 2d       	mov	r31, r0
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
 db2:	01 11       	cpse	r16, r1
 db4:	0e c0       	rjmp	.+28     	; 0xdd2 <shiftOut+0x4a>
 db6:	c6 01       	movw	r24, r12
 db8:	8c 1b       	sub	r24, r28
 dba:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
 dbc:	b7 01       	movw	r22, r14
 dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <shiftOut+0x3c>
 dc0:	75 95       	asr	r23
 dc2:	67 95       	ror	r22
 dc4:	8a 95       	dec	r24
 dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <shiftOut+0x38>
 dc8:	61 70       	andi	r22, 0x01	; 1
 dca:	8b 2d       	mov	r24, r11
 dcc:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
 dd0:	0b c0       	rjmp	.+22     	; 0xde8 <shiftOut+0x60>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 dd2:	b7 01       	movw	r22, r14
 dd4:	0c 2e       	mov	r0, r28
 dd6:	02 c0       	rjmp	.+4      	; 0xddc <shiftOut+0x54>
 dd8:	75 95       	asr	r23
 dda:	67 95       	ror	r22
 ddc:	0a 94       	dec	r0
 dde:	e2 f7       	brpl	.-8      	; 0xdd8 <shiftOut+0x50>
 de0:	61 70       	andi	r22, 0x01	; 1
 de2:	8b 2d       	mov	r24, r11
 de4:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
 de8:	61 e0       	ldi	r22, 0x01	; 1
 dea:	81 2f       	mov	r24, r17
 dec:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
		digitalWrite(clockPin, LOW);		
 df0:	60 e0       	ldi	r22, 0x00	; 0
 df2:	81 2f       	mov	r24, r17
 df4:	0e 94 93 06 	call	0xd26	; 0xd26 <digitalWrite>
 df8:	21 97       	sbiw	r28, 0x01	; 1
 dfa:	d8 f6       	brcc	.-74     	; 0xdb2 <shiftOut+0x2a>
	}
}
 dfc:	df 91       	pop	r29
 dfe:	cf 91       	pop	r28
 e00:	1f 91       	pop	r17
 e02:	0f 91       	pop	r16
 e04:	ff 90       	pop	r15
 e06:	ef 90       	pop	r14
 e08:	df 90       	pop	r13
 e0a:	cf 90       	pop	r12
 e0c:	bf 90       	pop	r11
 e0e:	08 95       	ret

00000e10 <__udivmodsi4>:
 e10:	a1 e2       	ldi	r26, 0x21	; 33
 e12:	1a 2e       	mov	r1, r26
 e14:	aa 1b       	sub	r26, r26
 e16:	bb 1b       	sub	r27, r27
 e18:	fd 01       	movw	r30, r26
 e1a:	0d c0       	rjmp	.+26     	; 0xe36 <__udivmodsi4_ep>

00000e1c <__udivmodsi4_loop>:
 e1c:	aa 1f       	adc	r26, r26
 e1e:	bb 1f       	adc	r27, r27
 e20:	ee 1f       	adc	r30, r30
 e22:	ff 1f       	adc	r31, r31
 e24:	a2 17       	cp	r26, r18
 e26:	b3 07       	cpc	r27, r19
 e28:	e4 07       	cpc	r30, r20
 e2a:	f5 07       	cpc	r31, r21
 e2c:	20 f0       	brcs	.+8      	; 0xe36 <__udivmodsi4_ep>
 e2e:	a2 1b       	sub	r26, r18
 e30:	b3 0b       	sbc	r27, r19
 e32:	e4 0b       	sbc	r30, r20
 e34:	f5 0b       	sbc	r31, r21

00000e36 <__udivmodsi4_ep>:
 e36:	66 1f       	adc	r22, r22
 e38:	77 1f       	adc	r23, r23
 e3a:	88 1f       	adc	r24, r24
 e3c:	99 1f       	adc	r25, r25
 e3e:	1a 94       	dec	r1
 e40:	69 f7       	brne	.-38     	; 0xe1c <__udivmodsi4_loop>
 e42:	60 95       	com	r22
 e44:	70 95       	com	r23
 e46:	80 95       	com	r24
 e48:	90 95       	com	r25
 e4a:	9b 01       	movw	r18, r22
 e4c:	ac 01       	movw	r20, r24
 e4e:	bd 01       	movw	r22, r26
 e50:	cf 01       	movw	r24, r30
 e52:	08 95       	ret

00000e54 <__tablejump2__>:
 e54:	ee 0f       	add	r30, r30
 e56:	ff 1f       	adc	r31, r31
 e58:	05 90       	lpm	r0, Z+
 e5a:	f4 91       	lpm	r31, Z
 e5c:	e0 2d       	mov	r30, r0
 e5e:	09 94       	ijmp

00000e60 <_exit>:
 e60:	f8 94       	cli

00000e62 <__stop_program>:
 e62:	ff cf       	rjmp	.-2      	; 0xe62 <__stop_program>
