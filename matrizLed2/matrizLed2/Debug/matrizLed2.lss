
matrizLed2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800200  000017d4  00001868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ae  008002b0  008002b0  00001918  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ccfa  00000000  00000000  00001e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002240  00000000  00000000  0000eafa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000029d1  00000000  00000000  00010d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fb8  00000000  00000000  0001370c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fad  00000000  00000000  000146c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004ce8  00000000  00000000  00016671  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  0001b359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c c1       	rjmp	.+536    	; 0x21a <__ctors_end>
       2:	00 00       	nop
       4:	fa c7       	rjmp	.+4084   	; 0xffa <__vector_1>
       6:	00 00       	nop
       8:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_2>
       c:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__vector_3>
      10:	0c 94 90 08 	jmp	0x1120	; 0x1120 <__vector_4>
      14:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <__vector_5>
      18:	0c 94 f2 08 	jmp	0x11e4	; 0x11e4 <__vector_6>
      1c:	0c 94 23 09 	jmp	0x1246	; 0x1246 <__vector_7>
      20:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__vector_8>
      24:	2a c1       	rjmp	.+596    	; 0x27a <__bad_interrupt>
      26:	00 00       	nop
      28:	28 c1       	rjmp	.+592    	; 0x27a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	26 c1       	rjmp	.+588    	; 0x27a <__bad_interrupt>
      2e:	00 00       	nop
      30:	24 c1       	rjmp	.+584    	; 0x27a <__bad_interrupt>
      32:	00 00       	nop
      34:	83 c7       	rjmp	.+3846   	; 0xf3c <__vector_13>
      36:	00 00       	nop
      38:	20 c1       	rjmp	.+576    	; 0x27a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1e c1       	rjmp	.+572    	; 0x27a <__bad_interrupt>
      3e:	00 00       	nop
      40:	1c c1       	rjmp	.+568    	; 0x27a <__bad_interrupt>
      42:	00 00       	nop
      44:	1a c1       	rjmp	.+564    	; 0x27a <__bad_interrupt>
      46:	00 00       	nop
      48:	18 c1       	rjmp	.+560    	; 0x27a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	16 c1       	rjmp	.+556    	; 0x27a <__bad_interrupt>
      4e:	00 00       	nop
      50:	14 c1       	rjmp	.+552    	; 0x27a <__bad_interrupt>
      52:	00 00       	nop
      54:	12 c1       	rjmp	.+548    	; 0x27a <__bad_interrupt>
      56:	00 00       	nop
      58:	10 c1       	rjmp	.+544    	; 0x27a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 85 09 	jmp	0x130a	; 0x130a <__vector_23>
      60:	0c c1       	rjmp	.+536    	; 0x27a <__bad_interrupt>
      62:	00 00       	nop
      64:	6c c3       	rjmp	.+1752   	; 0x73e <__vector_25>
      66:	00 00       	nop
      68:	a6 c3       	rjmp	.+1868   	; 0x7b6 <__vector_26>
      6a:	00 00       	nop
      6c:	06 c1       	rjmp	.+524    	; 0x27a <__bad_interrupt>
      6e:	00 00       	nop
      70:	04 c1       	rjmp	.+520    	; 0x27a <__bad_interrupt>
      72:	00 00       	nop
      74:	02 c1       	rjmp	.+516    	; 0x27a <__bad_interrupt>
      76:	00 00       	nop
      78:	00 c1       	rjmp	.+512    	; 0x27a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fe c0       	rjmp	.+508    	; 0x27a <__bad_interrupt>
      7e:	00 00       	nop
      80:	fc c0       	rjmp	.+504    	; 0x27a <__bad_interrupt>
      82:	00 00       	nop
      84:	fa c0       	rjmp	.+500    	; 0x27a <__bad_interrupt>
      86:	00 00       	nop
      88:	f8 c0       	rjmp	.+496    	; 0x27a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f6 c0       	rjmp	.+492    	; 0x27a <__bad_interrupt>
      8e:	00 00       	nop
      90:	f1 c3       	rjmp	.+2018   	; 0x874 <__vector_36>
      92:	00 00       	nop
      94:	2b c4       	rjmp	.+2134   	; 0x8ec <__vector_37>
      96:	00 00       	nop
      98:	f0 c0       	rjmp	.+480    	; 0x27a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ee c0       	rjmp	.+476    	; 0x27a <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ec c0       	rjmp	.+472    	; 0x27a <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ea c0       	rjmp	.+468    	; 0x27a <__bad_interrupt>
      a6:	00 00       	nop
      a8:	e8 c0       	rjmp	.+464    	; 0x27a <__bad_interrupt>
      aa:	00 00       	nop
      ac:	e6 c0       	rjmp	.+460    	; 0x27a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e4 c0       	rjmp	.+456    	; 0x27a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e2 c0       	rjmp	.+452    	; 0x27a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e0 c0       	rjmp	.+448    	; 0x27a <__bad_interrupt>
      ba:	00 00       	nop
      bc:	de c0       	rjmp	.+444    	; 0x27a <__bad_interrupt>
      be:	00 00       	nop
      c0:	dc c0       	rjmp	.+440    	; 0x27a <__bad_interrupt>
      c2:	00 00       	nop
      c4:	da c0       	rjmp	.+436    	; 0x27a <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d8 c0       	rjmp	.+432    	; 0x27a <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6e c4       	rjmp	.+2268   	; 0x9aa <__vector_51>
      ce:	00 00       	nop
      d0:	a8 c4       	rjmp	.+2384   	; 0xa22 <__vector_52>
      d2:	00 00       	nop
      d4:	d2 c0       	rjmp	.+420    	; 0x27a <__bad_interrupt>
      d6:	00 00       	nop
      d8:	03 c5       	rjmp	.+2566   	; 0xae0 <__vector_54>
      da:	00 00       	nop
      dc:	3d c5       	rjmp	.+2682   	; 0xb58 <__vector_55>
      de:	00 00       	nop
      e0:	cc c0       	rjmp	.+408    	; 0x27a <__bad_interrupt>
      e2:	00 00       	nop
      e4:	9e 0a       	sbc	r9, r30
      e6:	a2 0a       	sbc	r10, r18
      e8:	8c 0a       	sbc	r8, r28
      ea:	92 0a       	sbc	r9, r18
      ec:	98 0a       	sbc	r9, r24
      ee:	e7 0a       	sbc	r14, r23
      f0:	a6 0a       	sbc	r10, r22
      f2:	ac 0a       	sbc	r10, r28
      f4:	b2 0a       	sbc	r11, r18
      f6:	b8 0a       	sbc	r11, r24
      f8:	be 0a       	sbc	r11, r30
      fa:	c4 0a       	sbc	r12, r20
      fc:	ca 0a       	sbc	r12, r26
      fe:	d0 0a       	sbc	r13, r16
     100:	e7 0a       	sbc	r14, r23
     102:	d6 0a       	sbc	r13, r22
     104:	dc 0a       	sbc	r13, r28
     106:	e2 0a       	sbc	r14, r18

00000108 <__trampolines_end>:
     108:	02 00       	.word	0x0002	; ????

00000109 <digital_pin_to_timer_PGM>:
     109:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     135:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000014f <digital_pin_to_bit_mask_PGM>:
     14f:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16f:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17f:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18f:	04 08 10 20 40 80                                   ... @.

00000195 <digital_pin_to_port_PGM>:
     195:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a5:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b5:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c5:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d5:	0b 0b 0b 0b 0b 0b                                   ......

000001db <port_to_output_PGM>:
     1db:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     1eb:	02 01 00 00 05 01 08 01 0b 01                       ..........

000001f5 <port_to_mode_PGM>:
     1f5:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     205:	01 01 00 00 04 01 07 01 0a 01 00                    ...........

00000210 <__ctors_start>:
     210:	0d 04       	cpc	r0, r13
     212:	a8 04       	cpc	r10, r8
     214:	43 05       	cpc	r20, r3
     216:	de 05       	cpc	r29, r14
     218:	4b 06       	cpc	r4, r27

0000021a <__ctors_end>:
     21a:	11 24       	eor	r1, r1
     21c:	1f be       	out	0x3f, r1	; 63
     21e:	cf ef       	ldi	r28, 0xFF	; 255
     220:	d1 e2       	ldi	r29, 0x21	; 33
     222:	de bf       	out	0x3e, r29	; 62
     224:	cd bf       	out	0x3d, r28	; 61
     226:	00 e0       	ldi	r16, 0x00	; 0
     228:	0c bf       	out	0x3c, r16	; 60

0000022a <__do_copy_data>:
     22a:	12 e0       	ldi	r17, 0x02	; 2
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b2 e0       	ldi	r27, 0x02	; 2
     230:	e4 ed       	ldi	r30, 0xD4	; 212
     232:	f7 e1       	ldi	r31, 0x17	; 23
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0b bf       	out	0x3b, r16	; 59
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x14>
     23a:	07 90       	elpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	a0 3b       	cpi	r26, 0xB0	; 176
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0x10>

00000244 <__do_clear_bss>:
     244:	26 e0       	ldi	r18, 0x06	; 6
     246:	a0 eb       	ldi	r26, 0xB0	; 176
     248:	b2 e0       	ldi	r27, 0x02	; 2
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	ae 35       	cpi	r26, 0x5E	; 94
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>

00000254 <__do_global_ctors>:
     254:	11 e0       	ldi	r17, 0x01	; 1
     256:	cd e0       	ldi	r28, 0x0D	; 13
     258:	d1 e0       	ldi	r29, 0x01	; 1
     25a:	00 e0       	ldi	r16, 0x00	; 0
     25c:	06 c0       	rjmp	.+12     	; 0x26a <__do_global_ctors+0x16>
     25e:	21 97       	sbiw	r28, 0x01	; 1
     260:	01 09       	sbc	r16, r1
     262:	80 2f       	mov	r24, r16
     264:	fe 01       	movw	r30, r28
     266:	0e 94 cc 0b 	call	0x1798	; 0x1798 <__tablejump2__>
     26a:	c8 30       	cpi	r28, 0x08	; 8
     26c:	d1 07       	cpc	r29, r17
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	08 07       	cpc	r16, r24
     272:	a9 f7       	brne	.-22     	; 0x25e <__do_global_ctors+0xa>
     274:	1c d5       	rcall	.+2616   	; 0xcae <main>
     276:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <_exit>

0000027a <__bad_interrupt>:
     27a:	c2 ce       	rjmp	.-636    	; 0x0 <__vectors>

0000027c <setup>:
		for (currentCol = 0; currentCol < COLMAX; currentCol++)
			matrix[currentRow][currentCol] = inMatrix[currentRow][currentCol];
}

void matrixReset()
{
     27c:	26 e0       	ldi	r18, 0x06	; 6
     27e:	40 e8       	ldi	r20, 0x80	; 128
     280:	55 e2       	ldi	r21, 0x25	; 37
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	70 e0       	ldi	r23, 0x00	; 0
     286:	84 ec       	ldi	r24, 0xC4	; 196
     288:	93 e0       	ldi	r25, 0x03	; 3
     28a:	f0 d1       	rcall	.+992    	; 0x66c <_ZN14HardwareSerial5beginEmh>
     28c:	61 e8       	ldi	r22, 0x81	; 129
     28e:	72 e0       	ldi	r23, 0x02	; 2
     290:	84 ec       	ldi	r24, 0xC4	; 196
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	6d d5       	rcall	.+2778   	; 0xd70 <_ZN5Print7printlnEPKc>
     296:	61 e0       	ldi	r22, 0x01	; 1
     298:	88 e0       	ldi	r24, 0x08	; 8
     29a:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pinMode>
     29e:	61 e0       	ldi	r22, 0x01	; 1
     2a0:	8a e0       	ldi	r24, 0x0A	; 10
     2a2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pinMode>
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	8c e0       	ldi	r24, 0x0C	; 12
     2aa:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pinMode>
     2ae:	61 e0       	ldi	r22, 0x01	; 1
     2b0:	89 e0       	ldi	r24, 0x09	; 9
     2b2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pinMode>
     2b6:	61 e0       	ldi	r22, 0x01	; 1
     2b8:	8b e0       	ldi	r24, 0x0B	; 11
     2ba:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pinMode>
     2be:	61 e0       	ldi	r22, 0x01	; 1
     2c0:	8d e0       	ldi	r24, 0x0D	; 13
     2c2:	0c 94 e8 0a 	jmp	0x15d0	; 0x15d0 <pinMode>
     2c6:	08 95       	ret

000002c8 <_Z11matrizWritehh>:
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	d8 2f       	mov	r29, r24
     2ce:	c6 2f       	mov	r28, r22
     2d0:	60 e0       	ldi	r22, 0x00	; 0
     2d2:	8c e0       	ldi	r24, 0x0C	; 12
     2d4:	0e 94 27 0b 	call	0x164e	; 0x164e <digitalWrite>
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	8d e0       	ldi	r24, 0x0D	; 13
     2dc:	0e 94 27 0b 	call	0x164e	; 0x164e <digitalWrite>
     2e0:	2d 2f       	mov	r18, r29
     2e2:	41 e0       	ldi	r20, 0x01	; 1
     2e4:	6a e0       	ldi	r22, 0x0A	; 10
     2e6:	88 e0       	ldi	r24, 0x08	; 8
     2e8:	0e 94 57 0b 	call	0x16ae	; 0x16ae <shiftOut>
     2ec:	2c 2f       	mov	r18, r28
     2ee:	41 e0       	ldi	r20, 0x01	; 1
     2f0:	6b e0       	ldi	r22, 0x0B	; 11
     2f2:	89 e0       	ldi	r24, 0x09	; 9
     2f4:	0e 94 57 0b 	call	0x16ae	; 0x16ae <shiftOut>
     2f8:	61 e0       	ldi	r22, 0x01	; 1
     2fa:	8c e0       	ldi	r24, 0x0C	; 12
     2fc:	0e 94 27 0b 	call	0x164e	; 0x164e <digitalWrite>
     300:	61 e0       	ldi	r22, 0x01	; 1
     302:	8d e0       	ldi	r24, 0x0D	; 13
     304:	0e 94 27 0b 	call	0x164e	; 0x164e <digitalWrite>
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <_Z12matrixTurnOnv>:
		for (currentCol = 0; currentCol < COLMAX; currentCol++)
			matrix[currentRow][currentCol] = 0;
}

void matrixTurnOn()
{
     30e:	9f 92       	push	r9
     310:	af 92       	push	r10
     312:	bf 92       	push	r11
     314:	cf 92       	push	r12
     316:	df 92       	push	r13
     318:	ef 92       	push	r14
     31a:	ff 92       	push	r15
     31c:	0f 93       	push	r16
     31e:	1f 93       	push	r17
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
     324:	d0 e0       	ldi	r29, 0x00	; 0
     326:	04 eb       	ldi	r16, 0xB4	; 180
     328:	12 e0       	ldi	r17, 0x02	; 2
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
	{
		rowByte += currentRow;
		for(currentCol=0; currentCol<COLMAX; currentCol++)
     32a:	91 2c       	mov	r9, r1
     32c:	a1 2c       	mov	r10, r1
		{
			if(matrix[currentCol][currentCol] == 1)
				bitWrite(colByte, currentCol, 1);
			else
				bitWrite(colByte, currentCol, 0);
     32e:	c1 2c       	mov	r12, r1
     330:	d1 2c       	mov	r13, r1
     332:	76 01       	movw	r14, r12
     334:	c3 94       	inc	r12
	int currentRow, currentCol;
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
	{
		rowByte += currentRow;
     336:	bd 0e       	add	r11, r29
     338:	f8 01       	movw	r30, r16
		for(currentCol=0; currentCol<COLMAX; currentCol++)
     33a:	29 2d       	mov	r18, r9
     33c:	3a 2d       	mov	r19, r10
		{
			if(matrix[currentCol][currentCol] == 1)
     33e:	80 81       	ld	r24, Z
     340:	91 81       	ldd	r25, Z+1	; 0x01
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	61 f4       	brne	.+24     	; 0x35e <_Z12matrixTurnOnv+0x50>
				bitWrite(colByte, currentCol, 1);
     346:	d7 01       	movw	r26, r14
     348:	c6 01       	movw	r24, r12
     34a:	02 2e       	mov	r0, r18
     34c:	04 c0       	rjmp	.+8      	; 0x356 <_Z12matrixTurnOnv+0x48>
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	aa 1f       	adc	r26, r26
     354:	bb 1f       	adc	r27, r27
     356:	0a 94       	dec	r0
     358:	d2 f7       	brpl	.-12     	; 0x34e <_Z12matrixTurnOnv+0x40>
     35a:	c8 2b       	or	r28, r24
     35c:	0c c0       	rjmp	.+24     	; 0x376 <_Z12matrixTurnOnv+0x68>
			else
				bitWrite(colByte, currentCol, 0);
     35e:	d7 01       	movw	r26, r14
     360:	c6 01       	movw	r24, r12
     362:	02 2e       	mov	r0, r18
     364:	04 c0       	rjmp	.+8      	; 0x36e <_Z12matrixTurnOnv+0x60>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	aa 1f       	adc	r26, r26
     36c:	bb 1f       	adc	r27, r27
     36e:	0a 94       	dec	r0
     370:	d2 f7       	brpl	.-12     	; 0x366 <_Z12matrixTurnOnv+0x58>
     372:	80 95       	com	r24
     374:	c8 23       	and	r28, r24
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
	{
		rowByte += currentRow;
		for(currentCol=0; currentCol<COLMAX; currentCol++)
     376:	2f 5f       	subi	r18, 0xFF	; 255
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	b4 96       	adiw	r30, 0x24	; 36
     37c:	28 30       	cpi	r18, 0x08	; 8
     37e:	31 05       	cpc	r19, r1
     380:	f1 f6       	brne	.-68     	; 0x33e <_Z12matrixTurnOnv+0x30>
			if(matrix[currentCol][currentCol] == 1)
				bitWrite(colByte, currentCol, 1);
			else
				bitWrite(colByte, currentCol, 0);
		}
		matrizWrite(rowByte, colByte);
     382:	6c 2f       	mov	r22, r28
     384:	8b 2d       	mov	r24, r11
     386:	a0 df       	rcall	.-192    	; 0x2c8 <_Z11matrizWritehh>
		delay(1);
     388:	c7 01       	movw	r24, r14
     38a:	b6 01       	movw	r22, r12
     38c:	0e 94 f5 09 	call	0x13ea	; 0x13ea <delay>
     390:	df 5f       	subi	r29, 0xFF	; 255
void matrixTurnOn()
{
	int currentRow, currentCol;
	byte rowByte, colByte;
	
	for(currentRow=0; currentRow<ROWMAX; currentRow++)
     392:	d8 30       	cpi	r29, 0x08	; 8
     394:	81 f6       	brne	.-96     	; 0x336 <_Z12matrixTurnOnv+0x28>
				bitWrite(colByte, currentCol, 0);
		}
		matrizWrite(rowByte, colByte);
		delay(1);
	}
}
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	bf 90       	pop	r11
     3a8:	af 90       	pop	r10
     3aa:	9f 90       	pop	r9
     3ac:	08 95       	ret

000003ae <_Z11matrixSlidePA8_i>:

void matrixSlide(int data[ROWMAX][COLMAX])
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
	
	if(movement == 0)
     3b2:	c0 91 b0 02 	lds	r28, 0x02B0
     3b6:	d0 91 b1 02 	lds	r29, 0x02B1
     3ba:	20 97       	sbiw	r28, 0x00	; 0
     3bc:	09 f0       	breq	.+2      	; 0x3c0 <_Z11matrixSlidePA8_i+0x12>
     3be:	48 c0       	rjmp	.+144    	; 0x450 <_Z11matrixSlidePA8_i+0xa2>
     3c0:	fc 01       	movw	r30, r24
     3c2:	44 ec       	ldi	r20, 0xC4	; 196
     3c4:	52 e0       	ldi	r21, 0x02	; 2
     3c6:	bc 01       	movw	r22, r24
     3c8:	60 58       	subi	r22, 0x80	; 128
     3ca:	7f 4f       	sbci	r23, 0xFF	; 255
     3cc:	0d c0       	rjmp	.+26     	; 0x3e8 <_Z11matrixSlidePA8_i+0x3a>
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
		{
			for(col=0; col<COLMAX; col++)
			{
				matrix[row][col+8] = data[row][col];
     3ce:	81 91       	ld	r24, Z+
     3d0:	91 91       	ld	r25, Z+
     3d2:	8d 93       	st	X+, r24
     3d4:	9d 93       	st	X+, r25
	if(movement == 0)
	{
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
		{
			for(col=0; col<COLMAX; col++)
     3d6:	e2 17       	cp	r30, r18
     3d8:	f3 07       	cpc	r31, r19
     3da:	c9 f7       	brne	.-14     	; 0x3ce <_Z11matrixSlidePA8_i+0x20>
     3dc:	4e 5d       	subi	r20, 0xDE	; 222
     3de:	5f 4f       	sbci	r21, 0xFF	; 255
     3e0:	f9 01       	movw	r30, r18
{
	
	if(movement == 0)
	{
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
     3e2:	62 17       	cp	r22, r18
     3e4:	73 07       	cpc	r23, r19
     3e6:	a1 f1       	breq	.+104    	; 0x450 <_Z11matrixSlidePA8_i+0xa2>
     3e8:	9f 01       	movw	r18, r30
     3ea:	20 5f       	subi	r18, 0xF0	; 240
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
		delay(1);
	}
}

void matrixSlide(int data[ROWMAX][COLMAX])
{
     3ee:	da 01       	movw	r26, r20
     3f0:	ee cf       	rjmp	.-36     	; 0x3ce <_Z11matrixSlidePA8_i+0x20>
	if(counter % 25 == 0)
	{
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
		for(col=0; col<COLMAX + 8; col++)
		matrix[row][col] = matrix[row][col+1];
     3f2:	82 81       	ldd	r24, Z+2	; 0x02
     3f4:	93 81       	ldd	r25, Z+3	; 0x03
     3f6:	81 93       	st	Z+, r24
     3f8:	91 93       	st	Z+, r25
	
	if(counter % 25 == 0)
	{
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
		for(col=0; col<COLMAX + 8; col++)
     3fa:	e2 17       	cp	r30, r18
     3fc:	f3 07       	cpc	r31, r19
     3fe:	c9 f7       	brne	.-14     	; 0x3f2 <_Z11matrixSlidePA8_i+0x44>
     400:	4e 5d       	subi	r20, 0xDE	; 222
     402:	5f 4f       	sbci	r21, 0xFF	; 255
	}
	
	if(counter % 25 == 0)
	{
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
     404:	46 17       	cp	r20, r22
     406:	57 07       	cpc	r21, r23
     408:	29 f0       	breq	.+10     	; 0x414 <_Z11matrixSlidePA8_i+0x66>
     40a:	9a 01       	movw	r18, r20
     40c:	20 5e       	subi	r18, 0xE0	; 224
     40e:	3f 4f       	sbci	r19, 0xFF	; 255
		delay(1);
	}
}

void matrixSlide(int data[ROWMAX][COLMAX])
{
     410:	fa 01       	movw	r30, r20
     412:	ef cf       	rjmp	.-34     	; 0x3f2 <_Z11matrixSlidePA8_i+0x44>
		uint8_t row, col;
		for(row=0; row<ROWMAX; row++)
		for(col=0; col<COLMAX + 8; col++)
		matrix[row][col] = matrix[row][col+1];
		
		movement++;
     414:	21 96       	adiw	r28, 0x01	; 1
     416:	d0 93 b1 02 	sts	0x02B1, r29
     41a:	c0 93 b0 02 	sts	0x02B0, r28
	}
	
	if(movement >= 16)
     41e:	80 91 b0 02 	lds	r24, 0x02B0
     422:	90 91 b1 02 	lds	r25, 0x02B1
     426:	40 97       	sbiw	r24, 0x10	; 16
     428:	44 f0       	brlt	.+16     	; 0x43a <_Z11matrixSlidePA8_i+0x8c>
	{
		counter = 0;
     42a:	10 92 b3 02 	sts	0x02B3, r1
     42e:	10 92 b2 02 	sts	0x02B2, r1
		movement = 0;
     432:	10 92 b1 02 	sts	0x02B1, r1
     436:	10 92 b0 02 	sts	0x02B0, r1
	}
	matrixTurnOn();
     43a:	69 df       	rcall	.-302    	; 0x30e <_Z12matrixTurnOnv>
	counter++;
     43c:	80 91 b2 02 	lds	r24, 0x02B2
     440:	90 91 b3 02 	lds	r25, 0x02B3
     444:	01 96       	adiw	r24, 0x01	; 1
     446:	90 93 b3 02 	sts	0x02B3, r25
     44a:	80 93 b2 02 	sts	0x02B2, r24
     44e:	0f c0       	rjmp	.+30     	; 0x46e <_Z11matrixSlidePA8_i+0xc0>
				matrix[row][col+8] = data[row][col];
			}
		}
	}
	
	if(counter % 25 == 0)
     450:	80 91 b2 02 	lds	r24, 0x02B2
     454:	90 91 b3 02 	lds	r25, 0x02B3
     458:	69 e1       	ldi	r22, 0x19	; 25
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	0e 94 97 0b 	call	0x172e	; 0x172e <__divmodhi4>
     460:	89 2b       	or	r24, r25
     462:	e9 f6       	brne	.-70     	; 0x41e <_Z11matrixSlidePA8_i+0x70>
     464:	44 eb       	ldi	r20, 0xB4	; 180
     466:	52 e0       	ldi	r21, 0x02	; 2
     468:	64 ec       	ldi	r22, 0xC4	; 196
     46a:	73 e0       	ldi	r23, 0x03	; 3
     46c:	ce cf       	rjmp	.-100    	; 0x40a <_Z11matrixSlidePA8_i+0x5c>
		counter = 0;
		movement = 0;
	}
	matrixTurnOn();
	counter++;
}
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <loop>:

//Infinite loop
void loop()
{

	matrixSlide(a);
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	9a cf       	rjmp	.-204    	; 0x3ae <_Z11matrixSlidePA8_i>
     47a:	08 95       	ret

0000047c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     47c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     47e:	91 8d       	ldd	r25, Z+25	; 0x19
     480:	22 8d       	ldd	r18, Z+26	; 0x1a
     482:	89 2f       	mov	r24, r25
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	80 5c       	subi	r24, 0xC0	; 192
     488:	9f 4f       	sbci	r25, 0xFF	; 255
     48a:	82 1b       	sub	r24, r18
     48c:	91 09       	sbc	r25, r1
}
     48e:	8f 73       	andi	r24, 0x3F	; 63
     490:	99 27       	eor	r25, r25
     492:	08 95       	ret

00000494 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     494:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     496:	91 8d       	ldd	r25, Z+25	; 0x19
     498:	82 8d       	ldd	r24, Z+26	; 0x1a
     49a:	98 17       	cp	r25, r24
     49c:	31 f0       	breq	.+12     	; 0x4aa <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     49e:	82 8d       	ldd	r24, Z+26	; 0x1a
     4a0:	e8 0f       	add	r30, r24
     4a2:	f1 1d       	adc	r31, r1
     4a4:	85 8d       	ldd	r24, Z+29	; 0x1d
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     4ae:	08 95       	ret

000004b0 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     4b0:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     4b2:	91 8d       	ldd	r25, Z+25	; 0x19
     4b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     4b6:	98 17       	cp	r25, r24
     4b8:	61 f0       	breq	.+24     	; 0x4d2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     4ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     4bc:	df 01       	movw	r26, r30
     4be:	a8 0f       	add	r26, r24
     4c0:	b1 1d       	adc	r27, r1
     4c2:	5d 96       	adiw	r26, 0x1d	; 29
     4c4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     4c6:	92 8d       	ldd	r25, Z+26	; 0x1a
     4c8:	9f 5f       	subi	r25, 0xFF	; 255
     4ca:	9f 73       	andi	r25, 0x3F	; 63
     4cc:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     4d2:	8f ef       	ldi	r24, 0xFF	; 255
     4d4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     4d6:	08 95       	ret

000004d8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     4d8:	84 e0       	ldi	r24, 0x04	; 4
     4da:	94 e0       	ldi	r25, 0x04	; 4
     4dc:	89 2b       	or	r24, r25
     4de:	41 f0       	breq	.+16     	; 0x4f0 <_Z14serialEventRunv+0x18>
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	21 f0       	breq	.+8      	; 0x4f0 <_Z14serialEventRunv+0x18>
     4e8:	8f d1       	rcall	.+798    	; 0x808 <_Z17Serial0_availablev>
     4ea:	81 11       	cpse	r24, r1
     4ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     4f0:	8f e9       	ldi	r24, 0x9F	; 159
     4f2:	94 e0       	ldi	r25, 0x04	; 4
     4f4:	89 2b       	or	r24, r25
     4f6:	41 f0       	breq	.+16     	; 0x508 <_Z14serialEventRunv+0x30>
     4f8:	80 e0       	ldi	r24, 0x00	; 0
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	89 2b       	or	r24, r25
     4fe:	21 f0       	breq	.+8      	; 0x508 <_Z14serialEventRunv+0x30>
     500:	1e d2       	rcall	.+1084   	; 0x93e <_Z17Serial1_availablev>
     502:	81 11       	cpse	r24, r1
     504:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     508:	8a e3       	ldi	r24, 0x3A	; 58
     50a:	95 e0       	ldi	r25, 0x05	; 5
     50c:	89 2b       	or	r24, r25
     50e:	41 f0       	breq	.+16     	; 0x520 <_Z14serialEventRunv+0x48>
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	89 2b       	or	r24, r25
     516:	21 f0       	breq	.+8      	; 0x520 <_Z14serialEventRunv+0x48>
     518:	ad d2       	rcall	.+1370   	; 0xa74 <_Z17Serial2_availablev>
     51a:	81 11       	cpse	r24, r1
     51c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     520:	85 ed       	ldi	r24, 0xD5	; 213
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	89 2b       	or	r24, r25
     526:	41 f0       	breq	.+16     	; 0x538 <_Z14serialEventRunv+0x60>
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	89 2b       	or	r24, r25
     52e:	21 f0       	breq	.+8      	; 0x538 <_Z14serialEventRunv+0x60>
     530:	3c d3       	rcall	.+1656   	; 0xbaa <_Z17Serial3_availablev>
     532:	81 11       	cpse	r24, r1
     534:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     538:	08 95       	ret

0000053a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     53a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     53c:	84 8d       	ldd	r24, Z+28	; 0x1c
     53e:	df 01       	movw	r26, r30
     540:	a8 0f       	add	r26, r24
     542:	b1 1d       	adc	r27, r1
     544:	a3 5a       	subi	r26, 0xA3	; 163
     546:	bf 4f       	sbci	r27, 0xFF	; 255
     548:	8c 91       	ld	r24, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     54a:	24 8d       	ldd	r18, Z+28	; 0x1c
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	2f 5f       	subi	r18, 0xFF	; 255
     550:	3f 4f       	sbci	r19, 0xFF	; 255
     552:	2f 73       	andi	r18, 0x3F	; 63
     554:	30 78       	andi	r19, 0x80	; 128
     556:	33 23       	and	r19, r19
     558:	34 f4       	brge	.+12     	; 0x566 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x2c>
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	31 09       	sbc	r19, r1
     55e:	20 6c       	ori	r18, 0xC0	; 192
     560:	3f 6f       	ori	r19, 0xFF	; 255
     562:	2f 5f       	subi	r18, 0xFF	; 255
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	24 8f       	std	Z+28, r18	; 0x1c

  *_udr = c;
     568:	a6 89       	ldd	r26, Z+22	; 0x16
     56a:	b7 89       	ldd	r27, Z+23	; 0x17
     56c:	8c 93       	st	X, r24

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     56e:	a0 89       	ldd	r26, Z+16	; 0x10
     570:	b1 89       	ldd	r27, Z+17	; 0x11
     572:	8c 91       	ld	r24, X
     574:	80 64       	ori	r24, 0x40	; 64
     576:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     578:	93 8d       	ldd	r25, Z+27	; 0x1b
     57a:	84 8d       	ldd	r24, Z+28	; 0x1c
     57c:	98 13       	cpse	r25, r24
     57e:	06 c0       	rjmp	.+12     	; 0x58c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x52>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     580:	02 88       	ldd	r0, Z+18	; 0x12
     582:	f3 89       	ldd	r31, Z+19	; 0x13
     584:	e0 2d       	mov	r30, r0
     586:	80 81       	ld	r24, Z
     588:	8f 7d       	andi	r24, 0xDF	; 223
     58a:	80 83       	st	Z, r24
     58c:	08 95       	ret

0000058e <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     594:	88 8d       	ldd	r24, Y+24	; 0x18
     596:	81 11       	cpse	r24, r1
     598:	0e c0       	rjmp	.+28     	; 0x5b6 <_ZN14HardwareSerial5flushEv+0x28>
     59a:	17 c0       	rjmp	.+46     	; 0x5ca <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	07 fc       	sbrc	r0, 7
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <_ZN14HardwareSerial5flushEv+0x2c>
     5a2:	90 81       	ld	r25, Z
     5a4:	95 ff       	sbrs	r25, 5
     5a6:	09 c0       	rjmp	.+18     	; 0x5ba <_ZN14HardwareSerial5flushEv+0x2c>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     5a8:	a8 89       	ldd	r26, Y+16	; 0x10
     5aa:	b9 89       	ldd	r27, Y+17	; 0x11
     5ac:	8c 91       	ld	r24, X
     5ae:	85 ff       	sbrs	r24, 5
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <_ZN14HardwareSerial5flushEv+0x2c>
	  _tx_udr_empty_irq();
     5b2:	ce 01       	movw	r24, r28
     5b4:	c2 df       	rcall	.-124    	; 0x53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     5b6:	ea 89       	ldd	r30, Y+18	; 0x12
     5b8:	fb 89       	ldd	r31, Y+19	; 0x13
     5ba:	90 81       	ld	r25, Z
     5bc:	95 fd       	sbrc	r25, 5
     5be:	ee cf       	rjmp	.-36     	; 0x59c <_ZN14HardwareSerial5flushEv+0xe>
     5c0:	a8 89       	ldd	r26, Y+16	; 0x10
     5c2:	b9 89       	ldd	r27, Y+17	; 0x11
     5c4:	8c 91       	ld	r24, X
     5c6:	86 ff       	sbrs	r24, 6
     5c8:	e9 cf       	rjmp	.-46     	; 0x59c <_ZN14HardwareSerial5flushEv+0xe>
	if (bit_is_set(*_ucsra, UDRE0))
	  _tx_udr_empty_irq();
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	fc 01       	movw	r30, r24
  _written = true;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	80 8f       	std	Z+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5de:	93 8d       	ldd	r25, Z+27	; 0x1b
     5e0:	84 8d       	ldd	r24, Z+28	; 0x1c
     5e2:	98 13       	cpse	r25, r24
     5e4:	21 c0       	rjmp	.+66     	; 0x628 <_ZN14HardwareSerial5writeEh+0x58>
     5e6:	a0 89       	ldd	r26, Z+16	; 0x10
     5e8:	b1 89       	ldd	r27, Z+17	; 0x11
     5ea:	8c 91       	ld	r24, X
     5ec:	85 fd       	sbrc	r24, 5
     5ee:	2e c0       	rjmp	.+92     	; 0x64c <_ZN14HardwareSerial5writeEh+0x7c>
     5f0:	1b c0       	rjmp	.+54     	; 0x628 <_ZN14HardwareSerial5writeEh+0x58>
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    if (bit_is_clear(SREG, SREG_I)) {
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	07 fc       	sbrc	r0, 7
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <_ZN14HardwareSerial5writeEh+0x36>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     5f8:	e8 89       	ldd	r30, Y+16	; 0x10
     5fa:	f9 89       	ldd	r31, Y+17	; 0x11
     5fc:	80 81       	ld	r24, Z
     5fe:	85 ff       	sbrs	r24, 5
     600:	02 c0       	rjmp	.+4      	; 0x606 <_ZN14HardwareSerial5writeEh+0x36>
	_tx_udr_empty_irq();
     602:	ce 01       	movw	r24, r28
     604:	9a df       	rcall	.-204    	; 0x53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     606:	9c 8d       	ldd	r25, Y+28	; 0x1c
     608:	09 17       	cp	r16, r25
     60a:	99 f3       	breq	.-26     	; 0x5f2 <_ZN14HardwareSerial5writeEh+0x22>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     60c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     60e:	fe 01       	movw	r30, r28
     610:	e8 0f       	add	r30, r24
     612:	f1 1d       	adc	r31, r1
     614:	e3 5a       	subi	r30, 0xA3	; 163
     616:	ff 4f       	sbci	r31, 0xFF	; 255
     618:	10 83       	st	Z, r17
  _tx_buffer_head = i;
     61a:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     61c:	ea 89       	ldd	r30, Y+18	; 0x12
     61e:	fb 89       	ldd	r31, Y+19	; 0x13
     620:	80 81       	ld	r24, Z
     622:	80 62       	ori	r24, 0x20	; 32
     624:	80 83       	st	Z, r24
  
  return 1;
     626:	1b c0       	rjmp	.+54     	; 0x65e <_ZN14HardwareSerial5writeEh+0x8e>
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     628:	23 8d       	ldd	r18, Z+27	; 0x1b
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	2f 5f       	subi	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	2f 73       	andi	r18, 0x3F	; 63
     632:	30 78       	andi	r19, 0x80	; 128
     634:	33 23       	and	r19, r19
     636:	34 f4       	brge	.+12     	; 0x644 <_ZN14HardwareSerial5writeEh+0x74>
     638:	21 50       	subi	r18, 0x01	; 1
     63a:	31 09       	sbc	r19, r1
     63c:	20 6c       	ori	r18, 0xC0	; 192
     63e:	3f 6f       	ori	r19, 0xFF	; 255
     640:	2f 5f       	subi	r18, 0xFF	; 255
     642:	3f 4f       	sbci	r19, 0xFF	; 255
     644:	16 2f       	mov	r17, r22
     646:	ef 01       	movw	r28, r30
     648:	02 2f       	mov	r16, r18
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     64a:	dd cf       	rjmp	.-70     	; 0x606 <_ZN14HardwareSerial5writeEh+0x36>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     64c:	a6 89       	ldd	r26, Z+22	; 0x16
     64e:	b7 89       	ldd	r27, Z+23	; 0x17
     650:	6c 93       	st	X, r22
    sbi(*_ucsra, TXC0);
     652:	00 88       	ldd	r0, Z+16	; 0x10
     654:	f1 89       	ldd	r31, Z+17	; 0x11
     656:	e0 2d       	mov	r30, r0
     658:	80 81       	ld	r24, Z
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	df 91       	pop	r29
     664:	cf 91       	pop	r28
     666:	1f 91       	pop	r17
     668:	0f 91       	pop	r16
     66a:	08 95       	ret

0000066c <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     66c:	bf 92       	push	r11
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	ec 01       	movw	r28, r24
     680:	6a 01       	movw	r12, r20
     682:	7b 01       	movw	r14, r22
     684:	b2 2e       	mov	r11, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     686:	e8 89       	ldd	r30, Y+16	; 0x10
     688:	f9 89       	ldd	r31, Y+17	; 0x11
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     68e:	41 15       	cp	r20, r1
     690:	51 4e       	sbci	r21, 0xE1	; 225
     692:	61 05       	cpc	r22, r1
     694:	71 05       	cpc	r23, r1
     696:	b1 f0       	breq	.+44     	; 0x6c4 <_ZN14HardwareSerial5beginEmh+0x58>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	79 e0       	ldi	r23, 0x09	; 9
     69c:	8d e3       	ldi	r24, 0x3D	; 61
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	a7 01       	movw	r20, r14
     6a2:	96 01       	movw	r18, r12
     6a4:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__udivmodsi4>
     6a8:	89 01       	movw	r16, r18
     6aa:	9a 01       	movw	r18, r20
     6ac:	01 50       	subi	r16, 0x01	; 1
     6ae:	11 09       	sbc	r17, r1
     6b0:	21 09       	sbc	r18, r1
     6b2:	31 09       	sbc	r19, r1
     6b4:	36 95       	lsr	r19
     6b6:	27 95       	ror	r18
     6b8:	17 95       	ror	r17
     6ba:	07 95       	ror	r16
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     6bc:	01 15       	cp	r16, r1
     6be:	80 e1       	ldi	r24, 0x10	; 16
     6c0:	18 07       	cpc	r17, r24
     6c2:	a8 f0       	brcs	.+42     	; 0x6ee <_ZN14HardwareSerial5beginEmh+0x82>
  {
    *_ucsra = 0;
     6c4:	e8 89       	ldd	r30, Y+16	; 0x10
     6c6:	f9 89       	ldd	r31, Y+17	; 0x11
     6c8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     6ca:	60 e8       	ldi	r22, 0x80	; 128
     6cc:	74 e8       	ldi	r23, 0x84	; 132
     6ce:	8e e1       	ldi	r24, 0x1E	; 30
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	a7 01       	movw	r20, r14
     6d4:	96 01       	movw	r18, r12
     6d6:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__udivmodsi4>
     6da:	da 01       	movw	r26, r20
     6dc:	c9 01       	movw	r24, r18
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	a1 09       	sbc	r26, r1
     6e2:	b1 09       	sbc	r27, r1
     6e4:	b6 95       	lsr	r27
     6e6:	a7 95       	ror	r26
     6e8:	97 95       	ror	r25
     6ea:	87 95       	ror	r24
     6ec:	8c 01       	movw	r16, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     6ee:	ec 85       	ldd	r30, Y+12	; 0x0c
     6f0:	fd 85       	ldd	r31, Y+13	; 0x0d
     6f2:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     6f4:	ee 85       	ldd	r30, Y+14	; 0x0e
     6f6:	ff 85       	ldd	r31, Y+15	; 0x0f
     6f8:	00 83       	st	Z, r16

  _written = false;
     6fa:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     6fc:	ec 89       	ldd	r30, Y+20	; 0x14
     6fe:	fd 89       	ldd	r31, Y+21	; 0x15
     700:	b0 82       	st	Z, r11
  
  sbi(*_ucsrb, RXEN0);
     702:	ea 89       	ldd	r30, Y+18	; 0x12
     704:	fb 89       	ldd	r31, Y+19	; 0x13
     706:	80 81       	ld	r24, Z
     708:	80 61       	ori	r24, 0x10	; 16
     70a:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     70c:	ea 89       	ldd	r30, Y+18	; 0x12
     70e:	fb 89       	ldd	r31, Y+19	; 0x13
     710:	80 81       	ld	r24, Z
     712:	88 60       	ori	r24, 0x08	; 8
     714:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     716:	ea 89       	ldd	r30, Y+18	; 0x12
     718:	fb 89       	ldd	r31, Y+19	; 0x13
     71a:	80 81       	ld	r24, Z
     71c:	80 68       	ori	r24, 0x80	; 128
     71e:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     720:	ea 89       	ldd	r30, Y+18	; 0x12
     722:	fb 89       	ldd	r31, Y+19	; 0x13
     724:	80 81       	ld	r24, Z
     726:	8f 7d       	andi	r24, 0xDF	; 223
     728:	80 83       	st	Z, r24
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
     730:	0f 91       	pop	r16
     732:	ff 90       	pop	r15
     734:	ef 90       	pop	r14
     736:	df 90       	pop	r13
     738:	cf 90       	pop	r12
     73a:	bf 90       	pop	r11
     73c:	08 95       	ret

0000073e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	0b b6       	in	r0, 0x3b	; 59
     74a:	0f 92       	push	r0
     74c:	2f 93       	push	r18
     74e:	8f 93       	push	r24
     750:	9f 93       	push	r25
     752:	af 93       	push	r26
     754:	bf 93       	push	r27
     756:	ef 93       	push	r30
     758:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     75a:	e0 91 d4 03 	lds	r30, 0x03D4
     75e:	f0 91 d5 03 	lds	r31, 0x03D5
     762:	80 81       	ld	r24, Z
     764:	82 fd       	sbrc	r24, 2
     766:	14 c0       	rjmp	.+40     	; 0x790 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     768:	e4 ec       	ldi	r30, 0xC4	; 196
     76a:	f3 e0       	ldi	r31, 0x03	; 3
     76c:	a6 89       	ldd	r26, Z+22	; 0x16
     76e:	b7 89       	ldd	r27, Z+23	; 0x17
     770:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     772:	81 8d       	ldd	r24, Z+25	; 0x19
     774:	8f 5f       	subi	r24, 0xFF	; 255
     776:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     778:	92 8d       	ldd	r25, Z+26	; 0x1a
     77a:	89 17       	cp	r24, r25
     77c:	71 f0       	breq	.+28     	; 0x79a <__vector_25+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
     77e:	df 01       	movw	r26, r30
     780:	e1 8d       	ldd	r30, Z+25	; 0x19
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ec 53       	subi	r30, 0x3C	; 60
     786:	fc 4f       	sbci	r31, 0xFC	; 252
     788:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     78a:	59 96       	adiw	r26, 0x19	; 25
     78c:	8c 93       	st	X, r24
     78e:	05 c0       	rjmp	.+10     	; 0x79a <__vector_25+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     790:	e0 91 da 03 	lds	r30, 0x03DA
     794:	f0 91 db 03 	lds	r31, 0x03DB
     798:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     79a:	ff 91       	pop	r31
     79c:	ef 91       	pop	r30
     79e:	bf 91       	pop	r27
     7a0:	af 91       	pop	r26
     7a2:	9f 91       	pop	r25
     7a4:	8f 91       	pop	r24
     7a6:	2f 91       	pop	r18
     7a8:	0f 90       	pop	r0
     7aa:	0b be       	out	0x3b, r0	; 59
     7ac:	0f 90       	pop	r0
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	0f 90       	pop	r0
     7b2:	1f 90       	pop	r1
     7b4:	18 95       	reti

000007b6 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     7b6:	1f 92       	push	r1
     7b8:	0f 92       	push	r0
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	0f 92       	push	r0
     7be:	11 24       	eor	r1, r1
     7c0:	0b b6       	in	r0, 0x3b	; 59
     7c2:	0f 92       	push	r0
     7c4:	2f 93       	push	r18
     7c6:	3f 93       	push	r19
     7c8:	4f 93       	push	r20
     7ca:	5f 93       	push	r21
     7cc:	6f 93       	push	r22
     7ce:	7f 93       	push	r23
     7d0:	8f 93       	push	r24
     7d2:	9f 93       	push	r25
     7d4:	af 93       	push	r26
     7d6:	bf 93       	push	r27
     7d8:	ef 93       	push	r30
     7da:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     7dc:	84 ec       	ldi	r24, 0xC4	; 196
     7de:	93 e0       	ldi	r25, 0x03	; 3
     7e0:	ac de       	rcall	.-680    	; 0x53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     808:	84 ec       	ldi	r24, 0xC4	; 196
     80a:	93 e0       	ldi	r25, 0x03	; 3
     80c:	37 de       	rcall	.-914    	; 0x47c <_ZN14HardwareSerial9availableEv>
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	89 2b       	or	r24, r25
     812:	09 f4       	brne	.+2      	; 0x816 <_Z17Serial0_availablev+0xe>
     814:	20 e0       	ldi	r18, 0x00	; 0
}
     816:	82 2f       	mov	r24, r18
     818:	08 95       	ret

0000081a <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     81a:	e4 ec       	ldi	r30, 0xC4	; 196
     81c:	f3 e0       	ldi	r31, 0x03	; 3
     81e:	13 82       	std	Z+3, r1	; 0x03
     820:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     822:	88 ee       	ldi	r24, 0xE8	; 232
     824:	93 e0       	ldi	r25, 0x03	; 3
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	84 83       	std	Z+4, r24	; 0x04
     82c:	95 83       	std	Z+5, r25	; 0x05
     82e:	a6 83       	std	Z+6, r26	; 0x06
     830:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     832:	8c e8       	ldi	r24, 0x8C	; 140
     834:	92 e0       	ldi	r25, 0x02	; 2
     836:	91 83       	std	Z+1, r25	; 0x01
     838:	80 83       	st	Z, r24
     83a:	85 ec       	ldi	r24, 0xC5	; 197
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	95 87       	std	Z+13, r25	; 0x0d
     840:	84 87       	std	Z+12, r24	; 0x0c
     842:	84 ec       	ldi	r24, 0xC4	; 196
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	97 87       	std	Z+15, r25	; 0x0f
     848:	86 87       	std	Z+14, r24	; 0x0e
     84a:	80 ec       	ldi	r24, 0xC0	; 192
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	91 8b       	std	Z+17, r25	; 0x11
     850:	80 8b       	std	Z+16, r24	; 0x10
     852:	81 ec       	ldi	r24, 0xC1	; 193
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	93 8b       	std	Z+19, r25	; 0x13
     858:	82 8b       	std	Z+18, r24	; 0x12
     85a:	82 ec       	ldi	r24, 0xC2	; 194
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	95 8b       	std	Z+21, r25	; 0x15
     860:	84 8b       	std	Z+20, r24	; 0x14
     862:	86 ec       	ldi	r24, 0xC6	; 198
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	97 8b       	std	Z+23, r25	; 0x17
     868:	86 8b       	std	Z+22, r24	; 0x16
     86a:	11 8e       	std	Z+25, r1	; 0x19
     86c:	12 8e       	std	Z+26, r1	; 0x1a
     86e:	13 8e       	std	Z+27, r1	; 0x1b
     870:	14 8e       	std	Z+28, r1	; 0x1c
     872:	08 95       	ret

00000874 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     874:	1f 92       	push	r1
     876:	0f 92       	push	r0
     878:	0f b6       	in	r0, 0x3f	; 63
     87a:	0f 92       	push	r0
     87c:	11 24       	eor	r1, r1
     87e:	0b b6       	in	r0, 0x3b	; 59
     880:	0f 92       	push	r0
     882:	2f 93       	push	r18
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     890:	e0 91 71 04 	lds	r30, 0x0471
     894:	f0 91 72 04 	lds	r31, 0x0472
     898:	80 81       	ld	r24, Z
     89a:	82 fd       	sbrc	r24, 2
     89c:	14 c0       	rjmp	.+40     	; 0x8c6 <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     89e:	e1 e6       	ldi	r30, 0x61	; 97
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	a6 89       	ldd	r26, Z+22	; 0x16
     8a4:	b7 89       	ldd	r27, Z+23	; 0x17
     8a6:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     8a8:	81 8d       	ldd	r24, Z+25	; 0x19
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     8ae:	92 8d       	ldd	r25, Z+26	; 0x1a
     8b0:	89 17       	cp	r24, r25
     8b2:	71 f0       	breq	.+28     	; 0x8d0 <__vector_36+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
     8b4:	df 01       	movw	r26, r30
     8b6:	e1 8d       	ldd	r30, Z+25	; 0x19
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	ef 59       	subi	r30, 0x9F	; 159
     8bc:	fb 4f       	sbci	r31, 0xFB	; 251
     8be:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     8c0:	59 96       	adiw	r26, 0x19	; 25
     8c2:	8c 93       	st	X, r24
     8c4:	05 c0       	rjmp	.+10     	; 0x8d0 <__vector_36+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8c6:	e0 91 77 04 	lds	r30, 0x0477
     8ca:	f0 91 78 04 	lds	r31, 0x0478
     8ce:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     8d0:	ff 91       	pop	r31
     8d2:	ef 91       	pop	r30
     8d4:	bf 91       	pop	r27
     8d6:	af 91       	pop	r26
     8d8:	9f 91       	pop	r25
     8da:	8f 91       	pop	r24
     8dc:	2f 91       	pop	r18
     8de:	0f 90       	pop	r0
     8e0:	0b be       	out	0x3b, r0	; 59
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0
     8e8:	1f 90       	pop	r1
     8ea:	18 95       	reti

000008ec <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     8ec:	1f 92       	push	r1
     8ee:	0f 92       	push	r0
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	0f 92       	push	r0
     8f4:	11 24       	eor	r1, r1
     8f6:	0b b6       	in	r0, 0x3b	; 59
     8f8:	0f 92       	push	r0
     8fa:	2f 93       	push	r18
     8fc:	3f 93       	push	r19
     8fe:	4f 93       	push	r20
     900:	5f 93       	push	r21
     902:	6f 93       	push	r22
     904:	7f 93       	push	r23
     906:	8f 93       	push	r24
     908:	9f 93       	push	r25
     90a:	af 93       	push	r26
     90c:	bf 93       	push	r27
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     912:	81 e6       	ldi	r24, 0x61	; 97
     914:	94 e0       	ldi	r25, 0x04	; 4
     916:	11 de       	rcall	.-990    	; 0x53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     918:	ff 91       	pop	r31
     91a:	ef 91       	pop	r30
     91c:	bf 91       	pop	r27
     91e:	af 91       	pop	r26
     920:	9f 91       	pop	r25
     922:	8f 91       	pop	r24
     924:	7f 91       	pop	r23
     926:	6f 91       	pop	r22
     928:	5f 91       	pop	r21
     92a:	4f 91       	pop	r20
     92c:	3f 91       	pop	r19
     92e:	2f 91       	pop	r18
     930:	0f 90       	pop	r0
     932:	0b be       	out	0x3b, r0	; 59
     934:	0f 90       	pop	r0
     936:	0f be       	out	0x3f, r0	; 63
     938:	0f 90       	pop	r0
     93a:	1f 90       	pop	r1
     93c:	18 95       	reti

0000093e <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     93e:	81 e6       	ldi	r24, 0x61	; 97
     940:	94 e0       	ldi	r25, 0x04	; 4
     942:	9c dd       	rcall	.-1224   	; 0x47c <_ZN14HardwareSerial9availableEv>
     944:	21 e0       	ldi	r18, 0x01	; 1
     946:	89 2b       	or	r24, r25
     948:	09 f4       	brne	.+2      	; 0x94c <_Z17Serial1_availablev+0xe>
     94a:	20 e0       	ldi	r18, 0x00	; 0
}
     94c:	82 2f       	mov	r24, r18
     94e:	08 95       	ret

00000950 <_GLOBAL__sub_I___vector_36>:
     950:	e1 e6       	ldi	r30, 0x61	; 97
     952:	f4 e0       	ldi	r31, 0x04	; 4
     954:	13 82       	std	Z+3, r1	; 0x03
     956:	12 82       	std	Z+2, r1	; 0x02
     958:	88 ee       	ldi	r24, 0xE8	; 232
     95a:	93 e0       	ldi	r25, 0x03	; 3
     95c:	a0 e0       	ldi	r26, 0x00	; 0
     95e:	b0 e0       	ldi	r27, 0x00	; 0
     960:	84 83       	std	Z+4, r24	; 0x04
     962:	95 83       	std	Z+5, r25	; 0x05
     964:	a6 83       	std	Z+6, r26	; 0x06
     966:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     968:	8c e8       	ldi	r24, 0x8C	; 140
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	91 83       	std	Z+1, r25	; 0x01
     96e:	80 83       	st	Z, r24
     970:	8d ec       	ldi	r24, 0xCD	; 205
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	95 87       	std	Z+13, r25	; 0x0d
     976:	84 87       	std	Z+12, r24	; 0x0c
     978:	8c ec       	ldi	r24, 0xCC	; 204
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	97 87       	std	Z+15, r25	; 0x0f
     97e:	86 87       	std	Z+14, r24	; 0x0e
     980:	88 ec       	ldi	r24, 0xC8	; 200
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	91 8b       	std	Z+17, r25	; 0x11
     986:	80 8b       	std	Z+16, r24	; 0x10
     988:	89 ec       	ldi	r24, 0xC9	; 201
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	93 8b       	std	Z+19, r25	; 0x13
     98e:	82 8b       	std	Z+18, r24	; 0x12
     990:	8a ec       	ldi	r24, 0xCA	; 202
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	95 8b       	std	Z+21, r25	; 0x15
     996:	84 8b       	std	Z+20, r24	; 0x14
     998:	8e ec       	ldi	r24, 0xCE	; 206
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	97 8b       	std	Z+23, r25	; 0x17
     99e:	86 8b       	std	Z+22, r24	; 0x16
     9a0:	11 8e       	std	Z+25, r1	; 0x19
     9a2:	12 8e       	std	Z+26, r1	; 0x1a
     9a4:	13 8e       	std	Z+27, r1	; 0x1b
     9a6:	14 8e       	std	Z+28, r1	; 0x1c
     9a8:	08 95       	ret

000009aa <__vector_51>:
// first place.

#if defined(HAVE_HWSERIAL2)

ISR(USART2_RX_vect)
{
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	0b b6       	in	r0, 0x3b	; 59
     9b6:	0f 92       	push	r0
     9b8:	2f 93       	push	r18
     9ba:	8f 93       	push	r24
     9bc:	9f 93       	push	r25
     9be:	af 93       	push	r26
     9c0:	bf 93       	push	r27
     9c2:	ef 93       	push	r30
     9c4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     9c6:	e0 91 0e 05 	lds	r30, 0x050E
     9ca:	f0 91 0f 05 	lds	r31, 0x050F
     9ce:	80 81       	ld	r24, Z
     9d0:	82 fd       	sbrc	r24, 2
     9d2:	14 c0       	rjmp	.+40     	; 0x9fc <__vector_51+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9d4:	ee ef       	ldi	r30, 0xFE	; 254
     9d6:	f4 e0       	ldi	r31, 0x04	; 4
     9d8:	a6 89       	ldd	r26, Z+22	; 0x16
     9da:	b7 89       	ldd	r27, Z+23	; 0x17
     9dc:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9de:	81 8d       	ldd	r24, Z+25	; 0x19
     9e0:	8f 5f       	subi	r24, 0xFF	; 255
     9e2:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9e4:	92 8d       	ldd	r25, Z+26	; 0x1a
     9e6:	89 17       	cp	r24, r25
     9e8:	71 f0       	breq	.+28     	; 0xa06 <__vector_51+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
     9ea:	df 01       	movw	r26, r30
     9ec:	e1 8d       	ldd	r30, Z+25	; 0x19
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	e2 50       	subi	r30, 0x02	; 2
     9f2:	fb 4f       	sbci	r31, 0xFB	; 251
     9f4:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     9f6:	59 96       	adiw	r26, 0x19	; 25
     9f8:	8c 93       	st	X, r24
     9fa:	05 c0       	rjmp	.+10     	; 0xa06 <__vector_51+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9fc:	e0 91 14 05 	lds	r30, 0x0514
     a00:	f0 91 15 05 	lds	r31, 0x0515
     a04:	80 81       	ld	r24, Z
  Serial2._rx_complete_irq();
}
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	2f 91       	pop	r18
     a14:	0f 90       	pop	r0
     a16:	0b be       	out	0x3b, r0	; 59
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	0f 90       	pop	r0
     a1e:	1f 90       	pop	r1
     a20:	18 95       	reti

00000a22 <__vector_52>:

ISR(USART2_UDRE_vect)
{
     a22:	1f 92       	push	r1
     a24:	0f 92       	push	r0
     a26:	0f b6       	in	r0, 0x3f	; 63
     a28:	0f 92       	push	r0
     a2a:	11 24       	eor	r1, r1
     a2c:	0b b6       	in	r0, 0x3b	; 59
     a2e:	0f 92       	push	r0
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	ef 93       	push	r30
     a46:	ff 93       	push	r31
  Serial2._tx_udr_empty_irq();
     a48:	8e ef       	ldi	r24, 0xFE	; 254
     a4a:	94 e0       	ldi	r25, 0x04	; 4
     a4c:	76 dd       	rcall	.-1300   	; 0x53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     a4e:	ff 91       	pop	r31
     a50:	ef 91       	pop	r30
     a52:	bf 91       	pop	r27
     a54:	af 91       	pop	r26
     a56:	9f 91       	pop	r25
     a58:	8f 91       	pop	r24
     a5a:	7f 91       	pop	r23
     a5c:	6f 91       	pop	r22
     a5e:	5f 91       	pop	r21
     a60:	4f 91       	pop	r20
     a62:	3f 91       	pop	r19
     a64:	2f 91       	pop	r18
     a66:	0f 90       	pop	r0
     a68:	0b be       	out	0x3b, r0	; 59
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <_Z17Serial2_availablev>:
HardwareSerial Serial2(&UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UCSR2C, &UDR2);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial2_available() {
  return Serial2.available();
     a74:	8e ef       	ldi	r24, 0xFE	; 254
     a76:	94 e0       	ldi	r25, 0x04	; 4
     a78:	01 dd       	rcall	.-1534   	; 0x47c <_ZN14HardwareSerial9availableEv>
     a7a:	21 e0       	ldi	r18, 0x01	; 1
     a7c:	89 2b       	or	r24, r25
     a7e:	09 f4       	brne	.+2      	; 0xa82 <_Z17Serial2_availablev+0xe>
     a80:	20 e0       	ldi	r18, 0x00	; 0
}
     a82:	82 2f       	mov	r24, r18
     a84:	08 95       	ret

00000a86 <_GLOBAL__sub_I___vector_51>:
     a86:	ee ef       	ldi	r30, 0xFE	; 254
     a88:	f4 e0       	ldi	r31, 0x04	; 4
     a8a:	13 82       	std	Z+3, r1	; 0x03
     a8c:	12 82       	std	Z+2, r1	; 0x02
     a8e:	88 ee       	ldi	r24, 0xE8	; 232
     a90:	93 e0       	ldi	r25, 0x03	; 3
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	84 83       	std	Z+4, r24	; 0x04
     a98:	95 83       	std	Z+5, r25	; 0x05
     a9a:	a6 83       	std	Z+6, r26	; 0x06
     a9c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     a9e:	8c e8       	ldi	r24, 0x8C	; 140
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	91 83       	std	Z+1, r25	; 0x01
     aa4:	80 83       	st	Z, r24
     aa6:	85 ed       	ldi	r24, 0xD5	; 213
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	95 87       	std	Z+13, r25	; 0x0d
     aac:	84 87       	std	Z+12, r24	; 0x0c
     aae:	84 ed       	ldi	r24, 0xD4	; 212
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	97 87       	std	Z+15, r25	; 0x0f
     ab4:	86 87       	std	Z+14, r24	; 0x0e
     ab6:	80 ed       	ldi	r24, 0xD0	; 208
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	91 8b       	std	Z+17, r25	; 0x11
     abc:	80 8b       	std	Z+16, r24	; 0x10
     abe:	81 ed       	ldi	r24, 0xD1	; 209
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	93 8b       	std	Z+19, r25	; 0x13
     ac4:	82 8b       	std	Z+18, r24	; 0x12
     ac6:	82 ed       	ldi	r24, 0xD2	; 210
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	95 8b       	std	Z+21, r25	; 0x15
     acc:	84 8b       	std	Z+20, r24	; 0x14
     ace:	86 ed       	ldi	r24, 0xD6	; 214
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	97 8b       	std	Z+23, r25	; 0x17
     ad4:	86 8b       	std	Z+22, r24	; 0x16
     ad6:	11 8e       	std	Z+25, r1	; 0x19
     ad8:	12 8e       	std	Z+26, r1	; 0x1a
     ada:	13 8e       	std	Z+27, r1	; 0x1b
     adc:	14 8e       	std	Z+28, r1	; 0x1c
     ade:	08 95       	ret

00000ae0 <__vector_54>:
// first place.

#if defined(HAVE_HWSERIAL3)

ISR(USART3_RX_vect)
{
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	0b b6       	in	r0, 0x3b	; 59
     aec:	0f 92       	push	r0
     aee:	2f 93       	push	r18
     af0:	8f 93       	push	r24
     af2:	9f 93       	push	r25
     af4:	af 93       	push	r26
     af6:	bf 93       	push	r27
     af8:	ef 93       	push	r30
     afa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     afc:	e0 91 ab 05 	lds	r30, 0x05AB
     b00:	f0 91 ac 05 	lds	r31, 0x05AC
     b04:	80 81       	ld	r24, Z
     b06:	82 fd       	sbrc	r24, 2
     b08:	14 c0       	rjmp	.+40     	; 0xb32 <__vector_54+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b0a:	eb e9       	ldi	r30, 0x9B	; 155
     b0c:	f5 e0       	ldi	r31, 0x05	; 5
     b0e:	a6 89       	ldd	r26, Z+22	; 0x16
     b10:	b7 89       	ldd	r27, Z+23	; 0x17
     b12:	2c 91       	ld	r18, X
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b14:	81 8d       	ldd	r24, Z+25	; 0x19
     b16:	8f 5f       	subi	r24, 0xFF	; 255
     b18:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b1a:	92 8d       	ldd	r25, Z+26	; 0x1a
     b1c:	89 17       	cp	r24, r25
     b1e:	71 f0       	breq	.+28     	; 0xb3c <__vector_54+0x5c>
      _rx_buffer[_rx_buffer_head] = c;
     b20:	df 01       	movw	r26, r30
     b22:	e1 8d       	ldd	r30, Z+25	; 0x19
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	e5 56       	subi	r30, 0x65	; 101
     b28:	fa 4f       	sbci	r31, 0xFA	; 250
     b2a:	25 8f       	std	Z+29, r18	; 0x1d
      _rx_buffer_head = i;
     b2c:	59 96       	adiw	r26, 0x19	; 25
     b2e:	8c 93       	st	X, r24
     b30:	05 c0       	rjmp	.+10     	; 0xb3c <__vector_54+0x5c>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b32:	e0 91 b1 05 	lds	r30, 0x05B1
     b36:	f0 91 b2 05 	lds	r31, 0x05B2
     b3a:	80 81       	ld	r24, Z
  Serial3._rx_complete_irq();
}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0b be       	out	0x3b, r0	; 59
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <__vector_55>:

ISR(USART3_UDRE_vect)
{
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	0b b6       	in	r0, 0x3b	; 59
     b64:	0f 92       	push	r0
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
  Serial3._tx_udr_empty_irq();
     b7e:	8b e9       	ldi	r24, 0x9B	; 155
     b80:	95 e0       	ldi	r25, 0x05	; 5
     b82:	db dc       	rcall	.-1610   	; 0x53a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     b84:	ff 91       	pop	r31
     b86:	ef 91       	pop	r30
     b88:	bf 91       	pop	r27
     b8a:	af 91       	pop	r26
     b8c:	9f 91       	pop	r25
     b8e:	8f 91       	pop	r24
     b90:	7f 91       	pop	r23
     b92:	6f 91       	pop	r22
     b94:	5f 91       	pop	r21
     b96:	4f 91       	pop	r20
     b98:	3f 91       	pop	r19
     b9a:	2f 91       	pop	r18
     b9c:	0f 90       	pop	r0
     b9e:	0b be       	out	0x3b, r0	; 59
     ba0:	0f 90       	pop	r0
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	0f 90       	pop	r0
     ba6:	1f 90       	pop	r1
     ba8:	18 95       	reti

00000baa <_Z17Serial3_availablev>:
HardwareSerial Serial3(&UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UCSR3C, &UDR3);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial3_available() {
  return Serial3.available();
     baa:	8b e9       	ldi	r24, 0x9B	; 155
     bac:	95 e0       	ldi	r25, 0x05	; 5
     bae:	66 dc       	rcall	.-1844   	; 0x47c <_ZN14HardwareSerial9availableEv>
     bb0:	21 e0       	ldi	r18, 0x01	; 1
     bb2:	89 2b       	or	r24, r25
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <_Z17Serial3_availablev+0xe>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
}
     bb8:	82 2f       	mov	r24, r18
     bba:	08 95       	ret

00000bbc <_GLOBAL__sub_I___vector_54>:
     bbc:	eb e9       	ldi	r30, 0x9B	; 155
     bbe:	f5 e0       	ldi	r31, 0x05	; 5
     bc0:	13 82       	std	Z+3, r1	; 0x03
     bc2:	12 82       	std	Z+2, r1	; 0x02
     bc4:	88 ee       	ldi	r24, 0xE8	; 232
     bc6:	93 e0       	ldi	r25, 0x03	; 3
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	84 83       	std	Z+4, r24	; 0x04
     bce:	95 83       	std	Z+5, r25	; 0x05
     bd0:	a6 83       	std	Z+6, r26	; 0x06
     bd2:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     bd4:	8c e8       	ldi	r24, 0x8C	; 140
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	91 83       	std	Z+1, r25	; 0x01
     bda:	80 83       	st	Z, r24
     bdc:	85 e3       	ldi	r24, 0x35	; 53
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	95 87       	std	Z+13, r25	; 0x0d
     be2:	84 87       	std	Z+12, r24	; 0x0c
     be4:	84 e3       	ldi	r24, 0x34	; 52
     be6:	91 e0       	ldi	r25, 0x01	; 1
     be8:	97 87       	std	Z+15, r25	; 0x0f
     bea:	86 87       	std	Z+14, r24	; 0x0e
     bec:	80 e3       	ldi	r24, 0x30	; 48
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	91 8b       	std	Z+17, r25	; 0x11
     bf2:	80 8b       	std	Z+16, r24	; 0x10
     bf4:	81 e3       	ldi	r24, 0x31	; 49
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	93 8b       	std	Z+19, r25	; 0x13
     bfa:	82 8b       	std	Z+18, r24	; 0x12
     bfc:	82 e3       	ldi	r24, 0x32	; 50
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	95 8b       	std	Z+21, r25	; 0x15
     c02:	84 8b       	std	Z+20, r24	; 0x14
     c04:	86 e3       	ldi	r24, 0x36	; 54
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	97 8b       	std	Z+23, r25	; 0x17
     c0a:	86 8b       	std	Z+22, r24	; 0x16
     c0c:	11 8e       	std	Z+25, r1	; 0x19
     c0e:	12 8e       	std	Z+26, r1	; 0x1a
     c10:	13 8e       	std	Z+27, r1	; 0x1b
     c12:	14 8e       	std	Z+28, r1	; 0x1c
     c14:	08 95       	ret

00000c16 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
     c16:	08 95       	ret

00000c18 <_ZNK9IPAddress7printToER5Print>:
}

bool IPAddress::operator==(const uint8_t* addr) const
{
    return memcmp(addr, _address.bytes, sizeof(_address.bytes)) == 0;
}
     c18:	8f 92       	push	r8
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	5c 01       	movw	r10, r24
     c32:	7b 01       	movw	r14, r22
     c34:	4c 01       	movw	r8, r24
     c36:	82 e0       	ldi	r24, 0x02	; 2
     c38:	88 0e       	add	r8, r24
     c3a:	91 1c       	adc	r9, r1
     c3c:	65 01       	movw	r12, r10
     c3e:	e5 e0       	ldi	r30, 0x05	; 5
     c40:	ce 0e       	add	r12, r30
     c42:	d1 1c       	adc	r13, r1
     c44:	00 e0       	ldi	r16, 0x00	; 0
     c46:	10 e0       	ldi	r17, 0x00	; 0
     c48:	f4 01       	movw	r30, r8
     c4a:	61 91       	ld	r22, Z+
     c4c:	4f 01       	movw	r8, r30
     c4e:	4a e0       	ldi	r20, 0x0A	; 10
     c50:	50 e0       	ldi	r21, 0x00	; 0
     c52:	c7 01       	movw	r24, r14
     c54:	1d d1       	rcall	.+570    	; 0xe90 <_ZN5Print5printEhi>
     c56:	ec 01       	movw	r28, r24
     c58:	6e e2       	ldi	r22, 0x2E	; 46
     c5a:	c7 01       	movw	r24, r14
     c5c:	75 d0       	rcall	.+234    	; 0xd48 <_ZN5Print5printEc>
     c5e:	8c 0f       	add	r24, r28
     c60:	9d 1f       	adc	r25, r29
     c62:	08 0f       	add	r16, r24
     c64:	19 1f       	adc	r17, r25
     c66:	8c 14       	cp	r8, r12
     c68:	9d 04       	cpc	r9, r13
     c6a:	71 f7       	brne	.-36     	; 0xc48 <_ZNK9IPAddress7printToER5Print+0x30>
     c6c:	4a e0       	ldi	r20, 0x0A	; 10
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	f5 01       	movw	r30, r10
     c72:	65 81       	ldd	r22, Z+5	; 0x05
     c74:	c7 01       	movw	r24, r14
     c76:	0c d1       	rcall	.+536    	; 0xe90 <_ZN5Print5printEhi>
     c78:	80 0f       	add	r24, r16
     c7a:	91 1f       	adc	r25, r17
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	cf 90       	pop	r12
     c8c:	bf 90       	pop	r11
     c8e:	af 90       	pop	r10
     c90:	9f 90       	pop	r9
     c92:	8f 90       	pop	r8
     c94:	08 95       	ret

00000c96 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    _address.dword = 0;
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
     c96:	e8 e3       	ldi	r30, 0x38	; 56
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	8c e9       	ldi	r24, 0x9C	; 156
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	91 83       	std	Z+1, r25	; 0x01
     ca0:	80 83       	st	Z, r24
{
    _address.bytes[0] = first_octet;
     ca2:	12 82       	std	Z+2, r1	; 0x02
    _address.bytes[1] = second_octet;
     ca4:	13 82       	std	Z+3, r1	; 0x03
    _address.bytes[2] = third_octet;
     ca6:	14 82       	std	Z+4, r1	; 0x04
    _address.bytes[3] = fourth_octet;
     ca8:	15 82       	std	Z+5, r1	; 0x05
     caa:	08 95       	ret

00000cac <initVariant>:
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
     cac:	08 95       	ret

00000cae <main>:

int main(void)
{
	init();
     cae:	c6 d3       	rcall	.+1932   	; 0x143c <init>

	initVariant();
     cb0:	fd df       	rcall	.-6      	; 0xcac <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     cb2:	e4 da       	rcall	.-2616   	; 0x27c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     cb4:	cc e6       	ldi	r28, 0x6C	; 108
     cb6:	d2 e0       	ldi	r29, 0x02	; 2
#endif
	
	setup();
    
	for (;;) {
		loop();
     cb8:	dd db       	rcall	.-2118   	; 0x474 <loop>
		if (serialEventRun) serialEventRun();
     cba:	20 97       	sbiw	r28, 0x00	; 0
     cbc:	e9 f3       	breq	.-6      	; 0xcb8 <main+0xa>
     cbe:	0c dc       	rcall	.-2024   	; 0x4d8 <_Z14serialEventRunv>
     cc0:	fb cf       	rjmp	.-10     	; 0xcb8 <main+0xa>

00000cc2 <_ZN5Print5writeEPKhj>:
size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     cc2:	cf 92       	push	r12
     cc4:	df 92       	push	r13
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
     cd2:	41 15       	cp	r20, r1
     cd4:	51 05       	cpc	r21, r1
     cd6:	b1 f0       	breq	.+44     	; 0xd04 <_ZN5Print5writeEPKhj+0x42>
     cd8:	8c 01       	movw	r16, r24
     cda:	e6 2e       	mov	r14, r22
     cdc:	f7 2e       	mov	r15, r23
     cde:	ea 01       	movw	r28, r20
     ce0:	c1 2c       	mov	r12, r1
     ce2:	d1 2c       	mov	r13, r1
     ce4:	d7 01       	movw	r26, r14
     ce6:	6d 91       	ld	r22, X+
     ce8:	7d 01       	movw	r14, r26
     cea:	d8 01       	movw	r26, r16
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	01 90       	ld	r0, Z+
     cf2:	f0 81       	ld	r31, Z
     cf4:	e0 2d       	mov	r30, r0
     cf6:	c8 01       	movw	r24, r16
     cf8:	19 95       	eicall
     cfa:	c8 0e       	add	r12, r24
     cfc:	d9 1e       	adc	r13, r25
     cfe:	21 97       	sbiw	r28, 0x01	; 1
     d00:	89 f7       	brne	.-30     	; 0xce4 <_ZN5Print5writeEPKhj+0x22>
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <_ZN5Print5writeEPKhj+0x46>
     d04:	c1 2c       	mov	r12, r1
     d06:	d1 2c       	mov	r13, r1
     d08:	c6 01       	movw	r24, r12
     d0a:	df 91       	pop	r29
     d0c:	cf 91       	pop	r28
     d0e:	1f 91       	pop	r17
     d10:	0f 91       	pop	r16
     d12:	ff 90       	pop	r15
     d14:	ef 90       	pop	r14
     d16:	df 90       	pop	r13
     d18:	cf 90       	pop	r12
     d1a:	08 95       	ret

00000d1c <_ZN5Print5printEPKc>:
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	81 f0       	breq	.+32     	; 0xd42 <_ZN5Print5printEPKc+0x26>
     d22:	fb 01       	movw	r30, r22
     d24:	01 90       	ld	r0, Z+
     d26:	00 20       	and	r0, r0
     d28:	e9 f7       	brne	.-6      	; 0xd24 <_ZN5Print5printEPKc+0x8>
     d2a:	31 97       	sbiw	r30, 0x01	; 1
     d2c:	af 01       	movw	r20, r30
     d2e:	46 1b       	sub	r20, r22
     d30:	57 0b       	sbc	r21, r23
     d32:	dc 01       	movw	r26, r24
     d34:	ed 91       	ld	r30, X+
     d36:	fc 91       	ld	r31, X
     d38:	02 80       	ldd	r0, Z+2	; 0x02
     d3a:	f3 81       	ldd	r31, Z+3	; 0x03
     d3c:	e0 2d       	mov	r30, r0
     d3e:	19 95       	eicall
     d40:	08 95       	ret
     d42:	80 e0       	ldi	r24, 0x00	; 0
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	08 95       	ret

00000d48 <_ZN5Print5printEc>:
     d48:	dc 01       	movw	r26, r24
     d4a:	ed 91       	ld	r30, X+
     d4c:	fc 91       	ld	r31, X
     d4e:	01 90       	ld	r0, Z+
     d50:	f0 81       	ld	r31, Z
     d52:	e0 2d       	mov	r30, r0
     d54:	19 95       	eicall
     d56:	08 95       	ret

00000d58 <_ZN5Print7printlnEv>:
     d58:	dc 01       	movw	r26, r24
     d5a:	ed 91       	ld	r30, X+
     d5c:	fc 91       	ld	r31, X
     d5e:	02 80       	ldd	r0, Z+2	; 0x02
     d60:	f3 81       	ldd	r31, Z+3	; 0x03
     d62:	e0 2d       	mov	r30, r0
     d64:	42 e0       	ldi	r20, 0x02	; 2
     d66:	50 e0       	ldi	r21, 0x00	; 0
     d68:	6e e9       	ldi	r22, 0x9E	; 158
     d6a:	72 e0       	ldi	r23, 0x02	; 2
     d6c:	19 95       	eicall
     d6e:	08 95       	ret

00000d70 <_ZN5Print7printlnEPKc>:
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	ec 01       	movw	r28, r24
     d7a:	d0 df       	rcall	.-96     	; 0xd1c <_ZN5Print5printEPKc>
     d7c:	8c 01       	movw	r16, r24
     d7e:	ce 01       	movw	r24, r28
     d80:	eb df       	rcall	.-42     	; 0xd58 <_ZN5Print7printlnEv>
     d82:	80 0f       	add	r24, r16
     d84:	91 1f       	adc	r25, r17
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	08 95       	ret

00000d90 <_ZN5Print11printNumberEmh>:
     d90:	4f 92       	push	r4
     d92:	5f 92       	push	r5
     d94:	6f 92       	push	r6
     d96:	7f 92       	push	r7
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	a1 97       	sbiw	r28, 0x21	; 33
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	5c 01       	movw	r10, r24
     dc0:	6a 01       	movw	r12, r20
     dc2:	7b 01       	movw	r14, r22
     dc4:	92 2e       	mov	r9, r18
     dc6:	19 a2       	std	Y+33, r1	; 0x21
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	82 17       	cp	r24, r18
     dcc:	20 f0       	brcs	.+8      	; 0xdd6 <_ZN5Print11printNumberEmh+0x46>
     dce:	0f 2e       	mov	r0, r31
     dd0:	fa e0       	ldi	r31, 0x0A	; 10
     dd2:	9f 2e       	mov	r9, r31
     dd4:	f0 2d       	mov	r31, r0
     dd6:	8e 01       	movw	r16, r28
     dd8:	0f 5d       	subi	r16, 0xDF	; 223
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	49 2c       	mov	r4, r9
     dde:	51 2c       	mov	r5, r1
     de0:	61 2c       	mov	r6, r1
     de2:	71 2c       	mov	r7, r1
     de4:	c7 01       	movw	r24, r14
     de6:	b6 01       	movw	r22, r12
     de8:	a3 01       	movw	r20, r6
     dea:	92 01       	movw	r18, r4
     dec:	b3 d4       	rcall	.+2406   	; 0x1754 <__udivmodsi4>
     dee:	8c 2d       	mov	r24, r12
     df0:	92 9e       	mul	r9, r18
     df2:	80 19       	sub	r24, r0
     df4:	11 24       	eor	r1, r1
     df6:	01 50       	subi	r16, 0x01	; 1
     df8:	11 09       	sbc	r17, r1
     dfa:	8a 30       	cpi	r24, 0x0A	; 10
     dfc:	10 f4       	brcc	.+4      	; 0xe02 <_ZN5Print11printNumberEmh+0x72>
     dfe:	80 5d       	subi	r24, 0xD0	; 208
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <_ZN5Print11printNumberEmh+0x74>
     e02:	89 5c       	subi	r24, 0xC9	; 201
     e04:	d8 01       	movw	r26, r16
     e06:	8c 93       	st	X, r24
     e08:	c2 2e       	mov	r12, r18
     e0a:	d3 2e       	mov	r13, r19
     e0c:	e4 2e       	mov	r14, r20
     e0e:	f5 2e       	mov	r15, r21
     e10:	c1 14       	cp	r12, r1
     e12:	d1 04       	cpc	r13, r1
     e14:	e1 04       	cpc	r14, r1
     e16:	f1 04       	cpc	r15, r1
     e18:	29 f7       	brne	.-54     	; 0xde4 <_ZN5Print11printNumberEmh+0x54>
     e1a:	01 15       	cp	r16, r1
     e1c:	11 05       	cpc	r17, r1
     e1e:	91 f0       	breq	.+36     	; 0xe44 <_ZN5Print11printNumberEmh+0xb4>
     e20:	f8 01       	movw	r30, r16
     e22:	01 90       	ld	r0, Z+
     e24:	00 20       	and	r0, r0
     e26:	e9 f7       	brne	.-6      	; 0xe22 <_ZN5Print11printNumberEmh+0x92>
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	af 01       	movw	r20, r30
     e2c:	40 1b       	sub	r20, r16
     e2e:	51 0b       	sbc	r21, r17
     e30:	d5 01       	movw	r26, r10
     e32:	ed 91       	ld	r30, X+
     e34:	fc 91       	ld	r31, X
     e36:	02 80       	ldd	r0, Z+2	; 0x02
     e38:	f3 81       	ldd	r31, Z+3	; 0x03
     e3a:	e0 2d       	mov	r30, r0
     e3c:	b8 01       	movw	r22, r16
     e3e:	c5 01       	movw	r24, r10
     e40:	19 95       	eicall
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <_ZN5Print11printNumberEmh+0xb8>
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	a1 96       	adiw	r28, 0x21	; 33
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	bf 90       	pop	r11
     e66:	af 90       	pop	r10
     e68:	9f 90       	pop	r9
     e6a:	7f 90       	pop	r7
     e6c:	6f 90       	pop	r6
     e6e:	5f 90       	pop	r5
     e70:	4f 90       	pop	r4
     e72:	08 95       	ret

00000e74 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     e74:	21 15       	cp	r18, r1
     e76:	31 05       	cpc	r19, r1
     e78:	49 f4       	brne	.+18     	; 0xe8c <_ZN5Print5printEmi+0x18>
     e7a:	dc 01       	movw	r26, r24
     e7c:	ed 91       	ld	r30, X+
     e7e:	fc 91       	ld	r31, X
     e80:	01 90       	ld	r0, Z+
     e82:	f0 81       	ld	r31, Z
     e84:	e0 2d       	mov	r30, r0
     e86:	64 2f       	mov	r22, r20
     e88:	19 95       	eicall
     e8a:	08 95       	ret
  else return printNumber(n, base);
     e8c:	81 cf       	rjmp	.-254    	; 0xd90 <_ZN5Print11printNumberEmh>
}
     e8e:	08 95       	ret

00000e90 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     e90:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     e92:	46 2f       	mov	r20, r22
     e94:	50 e0       	ldi	r21, 0x00	; 0
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	ec cf       	rjmp	.-40     	; 0xe74 <_ZN5Print5printEmi>
}
     e9c:	08 95       	ret

00000e9e <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
     e9e:	82 30       	cpi	r24, 0x02	; 2
     ea0:	a9 f0       	breq	.+42     	; 0xecc <_Z12disableTimerh+0x2e>
     ea2:	28 f4       	brcc	.+10     	; 0xeae <_Z12disableTimerh+0x10>
     ea4:	88 23       	and	r24, r24
     ea6:	49 f0       	breq	.+18     	; 0xeba <_Z12disableTimerh+0x1c>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	51 f0       	breq	.+20     	; 0xec0 <_Z12disableTimerh+0x22>
     eac:	08 95       	ret
     eae:	84 30       	cpi	r24, 0x04	; 4
     eb0:	21 f1       	breq	.+72     	; 0xefa <_Z12disableTimerh+0x5c>
     eb2:	e8 f0       	brcs	.+58     	; 0xeee <_Z12disableTimerh+0x50>
     eb4:	85 30       	cpi	r24, 0x05	; 5
     eb6:	39 f1       	breq	.+78     	; 0xf06 <_Z12disableTimerh+0x68>
     eb8:	08 95       	ret
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
     eba:	10 92 6e 00 	sts	0x006E, r1
      #elif defined(TIMSK)
        TIMSK = 0; // atmega32
      #endif
      break;
     ebe:	08 95       	ret

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
     ec0:	ef e6       	ldi	r30, 0x6F	; 111
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	8d 7f       	andi	r24, 0xFD	; 253
     ec8:	80 83       	st	Z, r24
      break;
     eca:	08 95       	ret
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
     ecc:	e0 e7       	ldi	r30, 0x70	; 112
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8d 7f       	andi	r24, 0xFD	; 253
     ed4:	80 83       	st	Z, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
     edc:	e1 eb       	ldi	r30, 0xB1	; 177
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	88 7f       	andi	r24, 0xF8	; 248
     ee4:	84 60       	ori	r24, 0x04	; 4
     ee6:	80 83       	st	Z, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
     ee8:	10 92 b3 00 	sts	0x00B3, r1
      #endif
      break;
     eec:	08 95       	ret

#if defined(TIMSK3) && defined(OCIE3A)
    case 3:
      bitWrite(TIMSK3, OCIE3A, 0);
     eee:	e1 e7       	ldi	r30, 0x71	; 113
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	8d 7f       	andi	r24, 0xFD	; 253
     ef6:	80 83       	st	Z, r24
      break;
     ef8:	08 95       	ret
#endif

#if defined(TIMSK4) && defined(OCIE4A)
    case 4:
      bitWrite(TIMSK4, OCIE4A, 0);
     efa:	e2 e7       	ldi	r30, 0x72	; 114
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	80 81       	ld	r24, Z
     f00:	8d 7f       	andi	r24, 0xFD	; 253
     f02:	80 83       	st	Z, r24
      break;
     f04:	08 95       	ret
#endif

#if defined(TIMSK5) && defined(OCIE5A)
    case 5:
      bitWrite(TIMSK5, OCIE5A, 0);
     f06:	e3 e7       	ldi	r30, 0x73	; 115
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	8d 7f       	andi	r24, 0xFD	; 253
     f0e:	80 83       	st	Z, r24
     f10:	08 95       	ret

00000f12 <_Z6noToneh>:
  }
}


void noTone(uint8_t _pin)
{
     f12:	cf 93       	push	r28
     f14:	c8 2f       	mov	r28, r24
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
     f16:	80 91 80 02 	lds	r24, 0x0280
     f1a:	8c 13       	cpse	r24, r28
     f1c:	08 c0       	rjmp	.+16     	; 0xf2e <_Z6noToneh+0x1c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
     f1e:	e8 e0       	ldi	r30, 0x08	; 8
     f20:	f1 e0       	ldi	r31, 0x01	; 1
     f22:	e4 91       	lpm	r30, Z
     f24:	8e 2f       	mov	r24, r30
      tone_pins[i] = 255;
     f26:	9f ef       	ldi	r25, 0xFF	; 255
     f28:	90 93 80 02 	sts	0x0280, r25
     f2c:	01 c0       	rjmp	.+2      	; 0xf30 <_Z6noToneh+0x1e>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
    }
  }
  
  disableTimer(_timer);
     f30:	b6 df       	rcall	.-148    	; 0xe9e <_Z12disableTimerh>

  digitalWrite(_pin, 0);
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	8c 2f       	mov	r24, r28
     f36:	8b d3       	rcall	.+1814   	; 0x164e <digitalWrite>
}
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <__vector_13>:
#endif


#ifdef USE_TIMER2
ISR(TIMER2_COMPA_vect)
{
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	0b b6       	in	r0, 0x3b	; 59
     f48:	0f 92       	push	r0
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
     f62:	80 91 41 06 	lds	r24, 0x0641
     f66:	90 91 42 06 	lds	r25, 0x0642
     f6a:	a0 91 43 06 	lds	r26, 0x0643
     f6e:	b0 91 44 06 	lds	r27, 0x0644
     f72:	89 2b       	or	r24, r25
     f74:	8a 2b       	or	r24, r26
     f76:	8b 2b       	or	r24, r27
     f78:	51 f1       	breq	.+84     	; 0xfce <__vector_13+0x92>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
     f7a:	80 91 3e 06 	lds	r24, 0x063E
     f7e:	e0 91 3f 06 	lds	r30, 0x063F
     f82:	f0 91 40 06 	lds	r31, 0x0640
     f86:	90 81       	ld	r25, Z
     f88:	89 27       	eor	r24, r25
     f8a:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
     f8c:	80 91 41 06 	lds	r24, 0x0641
     f90:	90 91 42 06 	lds	r25, 0x0642
     f94:	a0 91 43 06 	lds	r26, 0x0643
     f98:	b0 91 44 06 	lds	r27, 0x0644
     f9c:	18 16       	cp	r1, r24
     f9e:	19 06       	cpc	r1, r25
     fa0:	1a 06       	cpc	r1, r26
     fa2:	1b 06       	cpc	r1, r27
     fa4:	bc f4       	brge	.+46     	; 0xfd4 <__vector_13+0x98>
      timer2_toggle_count--;
     fa6:	80 91 41 06 	lds	r24, 0x0641
     faa:	90 91 42 06 	lds	r25, 0x0642
     fae:	a0 91 43 06 	lds	r26, 0x0643
     fb2:	b0 91 44 06 	lds	r27, 0x0644
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	a1 09       	sbc	r26, r1
     fba:	b1 09       	sbc	r27, r1
     fbc:	80 93 41 06 	sts	0x0641, r24
     fc0:	90 93 42 06 	sts	0x0642, r25
     fc4:	a0 93 43 06 	sts	0x0643, r26
     fc8:	b0 93 44 06 	sts	0x0644, r27
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <__vector_13+0x98>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
     fce:	80 91 80 02 	lds	r24, 0x0280
     fd2:	9f df       	rcall	.-194    	; 0xf12 <_Z6noToneh>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
     fd4:	ff 91       	pop	r31
     fd6:	ef 91       	pop	r30
     fd8:	bf 91       	pop	r27
     fda:	af 91       	pop	r26
     fdc:	9f 91       	pop	r25
     fde:	8f 91       	pop	r24
     fe0:	7f 91       	pop	r23
     fe2:	6f 91       	pop	r22
     fe4:	5f 91       	pop	r21
     fe6:	4f 91       	pop	r20
     fe8:	3f 91       	pop	r19
     fea:	2f 91       	pop	r18
     fec:	0f 90       	pop	r0
     fee:	0b be       	out	0x3b, r0	; 59
     ff0:	0f 90       	pop	r0
     ff2:	0f be       	out	0x3f, r0	; 63
     ff4:	0f 90       	pop	r0
     ff6:	1f 90       	pop	r1
     ff8:	18 95       	reti

00000ffa <__vector_1>:
		intFunc[EXTERNAL_INT_4]();
}

#elif defined(EICRA) && defined(EICRB)

ISR(INT0_vect) {
     ffa:	1f 92       	push	r1
     ffc:	0f 92       	push	r0
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	0f 92       	push	r0
    1002:	11 24       	eor	r1, r1
    1004:	0b b6       	in	r0, 0x3b	; 59
    1006:	0f 92       	push	r0
    1008:	2f 93       	push	r18
    100a:	3f 93       	push	r19
    100c:	4f 93       	push	r20
    100e:	5f 93       	push	r21
    1010:	6f 93       	push	r22
    1012:	7f 93       	push	r23
    1014:	8f 93       	push	r24
    1016:	9f 93       	push	r25
    1018:	af 93       	push	r26
    101a:	bf 93       	push	r27
    101c:	ef 93       	push	r30
    101e:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
    1020:	80 91 49 06 	lds	r24, 0x0649
    1024:	90 91 4a 06 	lds	r25, 0x064A
    1028:	89 2b       	or	r24, r25
    102a:	29 f0       	breq	.+10     	; 0x1036 <__vector_1+0x3c>
    intFunc[EXTERNAL_INT_2]();
    102c:	e0 91 49 06 	lds	r30, 0x0649
    1030:	f0 91 4a 06 	lds	r31, 0x064A
    1034:	19 95       	eicall
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0b be       	out	0x3b, r0	; 59
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_2>:

ISR(INT1_vect) {
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	0b b6       	in	r0, 0x3b	; 59
    1068:	0f 92       	push	r0
    106a:	2f 93       	push	r18
    106c:	3f 93       	push	r19
    106e:	4f 93       	push	r20
    1070:	5f 93       	push	r21
    1072:	6f 93       	push	r22
    1074:	7f 93       	push	r23
    1076:	8f 93       	push	r24
    1078:	9f 93       	push	r25
    107a:	af 93       	push	r26
    107c:	bf 93       	push	r27
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
    1082:	80 91 4b 06 	lds	r24, 0x064B
    1086:	90 91 4c 06 	lds	r25, 0x064C
    108a:	89 2b       	or	r24, r25
    108c:	29 f0       	breq	.+10     	; 0x1098 <__vector_2+0x3c>
    intFunc[EXTERNAL_INT_3]();
    108e:	e0 91 4b 06 	lds	r30, 0x064B
    1092:	f0 91 4c 06 	lds	r31, 0x064C
    1096:	19 95       	eicall
}
    1098:	ff 91       	pop	r31
    109a:	ef 91       	pop	r30
    109c:	bf 91       	pop	r27
    109e:	af 91       	pop	r26
    10a0:	9f 91       	pop	r25
    10a2:	8f 91       	pop	r24
    10a4:	7f 91       	pop	r23
    10a6:	6f 91       	pop	r22
    10a8:	5f 91       	pop	r21
    10aa:	4f 91       	pop	r20
    10ac:	3f 91       	pop	r19
    10ae:	2f 91       	pop	r18
    10b0:	0f 90       	pop	r0
    10b2:	0b be       	out	0x3b, r0	; 59
    10b4:	0f 90       	pop	r0
    10b6:	0f be       	out	0x3f, r0	; 63
    10b8:	0f 90       	pop	r0
    10ba:	1f 90       	pop	r1
    10bc:	18 95       	reti

000010be <__vector_3>:

ISR(INT2_vect) {
    10be:	1f 92       	push	r1
    10c0:	0f 92       	push	r0
    10c2:	0f b6       	in	r0, 0x3f	; 63
    10c4:	0f 92       	push	r0
    10c6:	11 24       	eor	r1, r1
    10c8:	0b b6       	in	r0, 0x3b	; 59
    10ca:	0f 92       	push	r0
    10cc:	2f 93       	push	r18
    10ce:	3f 93       	push	r19
    10d0:	4f 93       	push	r20
    10d2:	5f 93       	push	r21
    10d4:	6f 93       	push	r22
    10d6:	7f 93       	push	r23
    10d8:	8f 93       	push	r24
    10da:	9f 93       	push	r25
    10dc:	af 93       	push	r26
    10de:	bf 93       	push	r27
    10e0:	ef 93       	push	r30
    10e2:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
    10e4:	80 91 4d 06 	lds	r24, 0x064D
    10e8:	90 91 4e 06 	lds	r25, 0x064E
    10ec:	89 2b       	or	r24, r25
    10ee:	29 f0       	breq	.+10     	; 0x10fa <__vector_3+0x3c>
    intFunc[EXTERNAL_INT_4]();
    10f0:	e0 91 4d 06 	lds	r30, 0x064D
    10f4:	f0 91 4e 06 	lds	r31, 0x064E
    10f8:	19 95       	eicall
}
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0b be       	out	0x3b, r0	; 59
    1116:	0f 90       	pop	r0
    1118:	0f be       	out	0x3f, r0	; 63
    111a:	0f 90       	pop	r0
    111c:	1f 90       	pop	r1
    111e:	18 95       	reti

00001120 <__vector_4>:

ISR(INT3_vect) {
    1120:	1f 92       	push	r1
    1122:	0f 92       	push	r0
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	0f 92       	push	r0
    1128:	11 24       	eor	r1, r1
    112a:	0b b6       	in	r0, 0x3b	; 59
    112c:	0f 92       	push	r0
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
    1146:	80 91 4f 06 	lds	r24, 0x064F
    114a:	90 91 50 06 	lds	r25, 0x0650
    114e:	89 2b       	or	r24, r25
    1150:	29 f0       	breq	.+10     	; 0x115c <__vector_4+0x3c>
    intFunc[EXTERNAL_INT_5]();
    1152:	e0 91 4f 06 	lds	r30, 0x064F
    1156:	f0 91 50 06 	lds	r31, 0x0650
    115a:	19 95       	eicall
}
    115c:	ff 91       	pop	r31
    115e:	ef 91       	pop	r30
    1160:	bf 91       	pop	r27
    1162:	af 91       	pop	r26
    1164:	9f 91       	pop	r25
    1166:	8f 91       	pop	r24
    1168:	7f 91       	pop	r23
    116a:	6f 91       	pop	r22
    116c:	5f 91       	pop	r21
    116e:	4f 91       	pop	r20
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <__vector_5>:

ISR(INT4_vect) {
    1182:	1f 92       	push	r1
    1184:	0f 92       	push	r0
    1186:	0f b6       	in	r0, 0x3f	; 63
    1188:	0f 92       	push	r0
    118a:	11 24       	eor	r1, r1
    118c:	0b b6       	in	r0, 0x3b	; 59
    118e:	0f 92       	push	r0
    1190:	2f 93       	push	r18
    1192:	3f 93       	push	r19
    1194:	4f 93       	push	r20
    1196:	5f 93       	push	r21
    1198:	6f 93       	push	r22
    119a:	7f 93       	push	r23
    119c:	8f 93       	push	r24
    119e:	9f 93       	push	r25
    11a0:	af 93       	push	r26
    11a2:	bf 93       	push	r27
    11a4:	ef 93       	push	r30
    11a6:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
    11a8:	80 91 45 06 	lds	r24, 0x0645
    11ac:	90 91 46 06 	lds	r25, 0x0646
    11b0:	89 2b       	or	r24, r25
    11b2:	29 f0       	breq	.+10     	; 0x11be <__vector_5+0x3c>
    intFunc[EXTERNAL_INT_0]();
    11b4:	e0 91 45 06 	lds	r30, 0x0645
    11b8:	f0 91 46 06 	lds	r31, 0x0646
    11bc:	19 95       	eicall
}
    11be:	ff 91       	pop	r31
    11c0:	ef 91       	pop	r30
    11c2:	bf 91       	pop	r27
    11c4:	af 91       	pop	r26
    11c6:	9f 91       	pop	r25
    11c8:	8f 91       	pop	r24
    11ca:	7f 91       	pop	r23
    11cc:	6f 91       	pop	r22
    11ce:	5f 91       	pop	r21
    11d0:	4f 91       	pop	r20
    11d2:	3f 91       	pop	r19
    11d4:	2f 91       	pop	r18
    11d6:	0f 90       	pop	r0
    11d8:	0b be       	out	0x3b, r0	; 59
    11da:	0f 90       	pop	r0
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	0f 90       	pop	r0
    11e0:	1f 90       	pop	r1
    11e2:	18 95       	reti

000011e4 <__vector_6>:

ISR(INT5_vect) {
    11e4:	1f 92       	push	r1
    11e6:	0f 92       	push	r0
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	0f 92       	push	r0
    11ec:	11 24       	eor	r1, r1
    11ee:	0b b6       	in	r0, 0x3b	; 59
    11f0:	0f 92       	push	r0
    11f2:	2f 93       	push	r18
    11f4:	3f 93       	push	r19
    11f6:	4f 93       	push	r20
    11f8:	5f 93       	push	r21
    11fa:	6f 93       	push	r22
    11fc:	7f 93       	push	r23
    11fe:	8f 93       	push	r24
    1200:	9f 93       	push	r25
    1202:	af 93       	push	r26
    1204:	bf 93       	push	r27
    1206:	ef 93       	push	r30
    1208:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
    120a:	80 91 47 06 	lds	r24, 0x0647
    120e:	90 91 48 06 	lds	r25, 0x0648
    1212:	89 2b       	or	r24, r25
    1214:	29 f0       	breq	.+10     	; 0x1220 <__vector_6+0x3c>
    intFunc[EXTERNAL_INT_1]();
    1216:	e0 91 47 06 	lds	r30, 0x0647
    121a:	f0 91 48 06 	lds	r31, 0x0648
    121e:	19 95       	eicall
}
    1220:	ff 91       	pop	r31
    1222:	ef 91       	pop	r30
    1224:	bf 91       	pop	r27
    1226:	af 91       	pop	r26
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	7f 91       	pop	r23
    122e:	6f 91       	pop	r22
    1230:	5f 91       	pop	r21
    1232:	4f 91       	pop	r20
    1234:	3f 91       	pop	r19
    1236:	2f 91       	pop	r18
    1238:	0f 90       	pop	r0
    123a:	0b be       	out	0x3b, r0	; 59
    123c:	0f 90       	pop	r0
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	0f 90       	pop	r0
    1242:	1f 90       	pop	r1
    1244:	18 95       	reti

00001246 <__vector_7>:

ISR(INT6_vect) {
    1246:	1f 92       	push	r1
    1248:	0f 92       	push	r0
    124a:	0f b6       	in	r0, 0x3f	; 63
    124c:	0f 92       	push	r0
    124e:	11 24       	eor	r1, r1
    1250:	0b b6       	in	r0, 0x3b	; 59
    1252:	0f 92       	push	r0
    1254:	2f 93       	push	r18
    1256:	3f 93       	push	r19
    1258:	4f 93       	push	r20
    125a:	5f 93       	push	r21
    125c:	6f 93       	push	r22
    125e:	7f 93       	push	r23
    1260:	8f 93       	push	r24
    1262:	9f 93       	push	r25
    1264:	af 93       	push	r26
    1266:	bf 93       	push	r27
    1268:	ef 93       	push	r30
    126a:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
    126c:	80 91 51 06 	lds	r24, 0x0651
    1270:	90 91 52 06 	lds	r25, 0x0652
    1274:	89 2b       	or	r24, r25
    1276:	29 f0       	breq	.+10     	; 0x1282 <__vector_7+0x3c>
    intFunc[EXTERNAL_INT_6]();
    1278:	e0 91 51 06 	lds	r30, 0x0651
    127c:	f0 91 52 06 	lds	r31, 0x0652
    1280:	19 95       	eicall
}
    1282:	ff 91       	pop	r31
    1284:	ef 91       	pop	r30
    1286:	bf 91       	pop	r27
    1288:	af 91       	pop	r26
    128a:	9f 91       	pop	r25
    128c:	8f 91       	pop	r24
    128e:	7f 91       	pop	r23
    1290:	6f 91       	pop	r22
    1292:	5f 91       	pop	r21
    1294:	4f 91       	pop	r20
    1296:	3f 91       	pop	r19
    1298:	2f 91       	pop	r18
    129a:	0f 90       	pop	r0
    129c:	0b be       	out	0x3b, r0	; 59
    129e:	0f 90       	pop	r0
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	0f 90       	pop	r0
    12a4:	1f 90       	pop	r1
    12a6:	18 95       	reti

000012a8 <__vector_8>:

ISR(INT7_vect) {
    12a8:	1f 92       	push	r1
    12aa:	0f 92       	push	r0
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	0f 92       	push	r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0b b6       	in	r0, 0x3b	; 59
    12b4:	0f 92       	push	r0
    12b6:	2f 93       	push	r18
    12b8:	3f 93       	push	r19
    12ba:	4f 93       	push	r20
    12bc:	5f 93       	push	r21
    12be:	6f 93       	push	r22
    12c0:	7f 93       	push	r23
    12c2:	8f 93       	push	r24
    12c4:	9f 93       	push	r25
    12c6:	af 93       	push	r26
    12c8:	bf 93       	push	r27
    12ca:	ef 93       	push	r30
    12cc:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
    12ce:	80 91 53 06 	lds	r24, 0x0653
    12d2:	90 91 54 06 	lds	r25, 0x0654
    12d6:	89 2b       	or	r24, r25
    12d8:	29 f0       	breq	.+10     	; 0x12e4 <__vector_8+0x3c>
    intFunc[EXTERNAL_INT_7]();
    12da:	e0 91 53 06 	lds	r30, 0x0653
    12de:	f0 91 54 06 	lds	r31, 0x0654
    12e2:	19 95       	eicall
}
    12e4:	ff 91       	pop	r31
    12e6:	ef 91       	pop	r30
    12e8:	bf 91       	pop	r27
    12ea:	af 91       	pop	r26
    12ec:	9f 91       	pop	r25
    12ee:	8f 91       	pop	r24
    12f0:	7f 91       	pop	r23
    12f2:	6f 91       	pop	r22
    12f4:	5f 91       	pop	r21
    12f6:	4f 91       	pop	r20
    12f8:	3f 91       	pop	r19
    12fa:	2f 91       	pop	r18
    12fc:	0f 90       	pop	r0
    12fe:	0b be       	out	0x3b, r0	; 59
    1300:	0f 90       	pop	r0
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	0f 90       	pop	r0
    1306:	1f 90       	pop	r1
    1308:	18 95       	reti

0000130a <__vector_23>:
	

#endif

	// busy wait
	__asm__ __volatile__ (
    130a:	1f 92       	push	r1
    130c:	0f 92       	push	r0
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	0f 92       	push	r0
    1312:	11 24       	eor	r1, r1
    1314:	2f 93       	push	r18
    1316:	3f 93       	push	r19
    1318:	8f 93       	push	r24
    131a:	9f 93       	push	r25
    131c:	af 93       	push	r26
    131e:	bf 93       	push	r27
    1320:	80 91 56 06 	lds	r24, 0x0656
    1324:	90 91 57 06 	lds	r25, 0x0657
    1328:	a0 91 58 06 	lds	r26, 0x0658
    132c:	b0 91 59 06 	lds	r27, 0x0659
    1330:	30 91 55 06 	lds	r19, 0x0655
    1334:	23 e0       	ldi	r18, 0x03	; 3
    1336:	23 0f       	add	r18, r19
    1338:	2d 37       	cpi	r18, 0x7D	; 125
    133a:	20 f4       	brcc	.+8      	; 0x1344 <__vector_23+0x3a>
    133c:	01 96       	adiw	r24, 0x01	; 1
    133e:	a1 1d       	adc	r26, r1
    1340:	b1 1d       	adc	r27, r1
    1342:	05 c0       	rjmp	.+10     	; 0x134e <__vector_23+0x44>
    1344:	26 e8       	ldi	r18, 0x86	; 134
    1346:	23 0f       	add	r18, r19
    1348:	02 96       	adiw	r24, 0x02	; 2
    134a:	a1 1d       	adc	r26, r1
    134c:	b1 1d       	adc	r27, r1
    134e:	20 93 55 06 	sts	0x0655, r18
    1352:	80 93 56 06 	sts	0x0656, r24
    1356:	90 93 57 06 	sts	0x0657, r25
    135a:	a0 93 58 06 	sts	0x0658, r26
    135e:	b0 93 59 06 	sts	0x0659, r27
    1362:	80 91 5a 06 	lds	r24, 0x065A
    1366:	90 91 5b 06 	lds	r25, 0x065B
    136a:	a0 91 5c 06 	lds	r26, 0x065C
    136e:	b0 91 5d 06 	lds	r27, 0x065D
    1372:	01 96       	adiw	r24, 0x01	; 1
    1374:	a1 1d       	adc	r26, r1
    1376:	b1 1d       	adc	r27, r1
    1378:	80 93 5a 06 	sts	0x065A, r24
    137c:	90 93 5b 06 	sts	0x065B, r25
    1380:	a0 93 5c 06 	sts	0x065C, r26
    1384:	b0 93 5d 06 	sts	0x065D, r27
    1388:	bf 91       	pop	r27
    138a:	af 91       	pop	r26
    138c:	9f 91       	pop	r25
    138e:	8f 91       	pop	r24
    1390:	3f 91       	pop	r19
    1392:	2f 91       	pop	r18
    1394:	0f 90       	pop	r0
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	0f 90       	pop	r0
    139a:	1f 90       	pop	r1
    139c:	18 95       	reti

0000139e <micros>:
    139e:	3f b7       	in	r19, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	80 91 5a 06 	lds	r24, 0x065A
    13a6:	90 91 5b 06 	lds	r25, 0x065B
    13aa:	a0 91 5c 06 	lds	r26, 0x065C
    13ae:	b0 91 5d 06 	lds	r27, 0x065D
    13b2:	26 b5       	in	r18, 0x26	; 38
    13b4:	a8 9b       	sbis	0x15, 0	; 21
    13b6:	05 c0       	rjmp	.+10     	; 0x13c2 <micros+0x24>
    13b8:	2f 3f       	cpi	r18, 0xFF	; 255
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <micros+0x24>
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	a1 1d       	adc	r26, r1
    13c0:	b1 1d       	adc	r27, r1
    13c2:	3f bf       	out	0x3f, r19	; 63
    13c4:	ba 2f       	mov	r27, r26
    13c6:	a9 2f       	mov	r26, r25
    13c8:	98 2f       	mov	r25, r24
    13ca:	88 27       	eor	r24, r24
    13cc:	82 0f       	add	r24, r18
    13ce:	91 1d       	adc	r25, r1
    13d0:	a1 1d       	adc	r26, r1
    13d2:	b1 1d       	adc	r27, r1
    13d4:	bc 01       	movw	r22, r24
    13d6:	cd 01       	movw	r24, r26
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	66 0f       	add	r22, r22
    13e2:	77 1f       	adc	r23, r23
    13e4:	88 1f       	adc	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	08 95       	ret

000013ea <delay>:
    13ea:	cf 92       	push	r12
    13ec:	df 92       	push	r13
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	6b 01       	movw	r12, r22
    13f8:	7c 01       	movw	r14, r24
    13fa:	d1 df       	rcall	.-94     	; 0x139e <micros>
    13fc:	eb 01       	movw	r28, r22
    13fe:	c1 14       	cp	r12, r1
    1400:	d1 04       	cpc	r13, r1
    1402:	e1 04       	cpc	r14, r1
    1404:	f1 04       	cpc	r15, r1
    1406:	99 f0       	breq	.+38     	; 0x142e <delay+0x44>
    1408:	06 dc       	rcall	.-2036   	; 0xc16 <yield>
    140a:	c9 df       	rcall	.-110    	; 0x139e <micros>
    140c:	6c 1b       	sub	r22, r28
    140e:	7d 0b       	sbc	r23, r29
    1410:	68 3e       	cpi	r22, 0xE8	; 232
    1412:	73 40       	sbci	r23, 0x03	; 3
    1414:	38 f0       	brcs	.+14     	; 0x1424 <delay+0x3a>
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	c8 1a       	sub	r12, r24
    141a:	d1 08       	sbc	r13, r1
    141c:	e1 08       	sbc	r14, r1
    141e:	f1 08       	sbc	r15, r1
    1420:	c8 51       	subi	r28, 0x18	; 24
    1422:	dc 4f       	sbci	r29, 0xFC	; 252
    1424:	c1 14       	cp	r12, r1
    1426:	d1 04       	cpc	r13, r1
    1428:	e1 04       	cpc	r14, r1
    142a:	f1 04       	cpc	r15, r1
    142c:	69 f7       	brne	.-38     	; 0x1408 <delay+0x1e>
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	08 95       	ret

0000143c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    143c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    143e:	84 b5       	in	r24, 0x24	; 36
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1444:	84 b5       	in	r24, 0x24	; 36
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    144a:	85 b5       	in	r24, 0x25	; 37
    144c:	82 60       	ori	r24, 0x02	; 2
    144e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1450:	85 b5       	in	r24, 0x25	; 37
    1452:	81 60       	ori	r24, 0x01	; 1
    1454:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1456:	ee e6       	ldi	r30, 0x6E	; 110
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	81 60       	ori	r24, 0x01	; 1
    145e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1460:	e1 e8       	ldi	r30, 0x81	; 129
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1466:	80 81       	ld	r24, Z
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1472:	e0 e8       	ldi	r30, 0x80	; 128
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	81 60       	ori	r24, 0x01	; 1
    147a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    147c:	e1 eb       	ldi	r30, 0xB1	; 177
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	84 60       	ori	r24, 0x04	; 4
    1484:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1486:	e0 eb       	ldi	r30, 0xB0	; 176
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	81 60       	ori	r24, 0x01	; 1
    148e:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1490:	e1 e9       	ldi	r30, 0x91	; 145
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	82 60       	ori	r24, 0x02	; 2
    1498:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    149a:	80 81       	ld	r24, Z
    149c:	81 60       	ori	r24, 0x01	; 1
    149e:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    14a0:	e0 e9       	ldi	r30, 0x90	; 144
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	81 60       	ori	r24, 0x01	; 1
    14a8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    14aa:	e1 ea       	ldi	r30, 0xA1	; 161
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	82 60       	ori	r24, 0x02	; 2
    14b2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    14b4:	80 81       	ld	r24, Z
    14b6:	81 60       	ori	r24, 0x01	; 1
    14b8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    14ba:	e0 ea       	ldi	r30, 0xA0	; 160
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	81 60       	ori	r24, 0x01	; 1
    14c2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    14c4:	e1 e2       	ldi	r30, 0x21	; 33
    14c6:	f1 e0       	ldi	r31, 0x01	; 1
    14c8:	80 81       	ld	r24, Z
    14ca:	82 60       	ori	r24, 0x02	; 2
    14cc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    14ce:	80 81       	ld	r24, Z
    14d0:	81 60       	ori	r24, 0x01	; 1
    14d2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    14d4:	e0 e2       	ldi	r30, 0x20	; 32
    14d6:	f1 e0       	ldi	r31, 0x01	; 1
    14d8:	80 81       	ld	r24, Z
    14da:	81 60       	ori	r24, 0x01	; 1
    14dc:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    14de:	ea e7       	ldi	r30, 0x7A	; 122
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	84 60       	ori	r24, 0x04	; 4
    14e6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    14e8:	80 81       	ld	r24, Z
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    14ee:	80 81       	ld	r24, Z
    14f0:	81 60       	ori	r24, 0x01	; 1
    14f2:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    14f4:	80 81       	ld	r24, Z
    14f6:	80 68       	ori	r24, 0x80	; 128
    14f8:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    14fa:	10 92 c1 00 	sts	0x00C1, r1
    14fe:	08 95       	ret

00001500 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	fc 01       	movw	r30, r24
    1504:	31 97       	sbiw	r30, 0x01	; 1
    1506:	e2 31       	cpi	r30, 0x12	; 18
    1508:	f1 05       	cpc	r31, r1
    150a:	08 f0       	brcs	.+2      	; 0x150e <turnOffPWM+0xe>
    150c:	60 c0       	rjmp	.+192    	; 0x15ce <turnOffPWM+0xce>
    150e:	88 27       	eor	r24, r24
    1510:	ee 58       	subi	r30, 0x8E	; 142
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	8f 4f       	sbci	r24, 0xFF	; 255
    1516:	40 c1       	rjmp	.+640    	; 0x1798 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1518:	e0 e8       	ldi	r30, 0x80	; 128
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	8f 77       	andi	r24, 0x7F	; 127
    1520:	80 83       	st	Z, r24
    1522:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1524:	e0 e8       	ldi	r30, 0x80	; 128
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8f 7d       	andi	r24, 0xDF	; 223
    152c:	80 83       	st	Z, r24
    152e:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    1530:	e0 e8       	ldi	r30, 0x80	; 128
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	87 7f       	andi	r24, 0xF7	; 247
    1538:	80 83       	st	Z, r24
    153a:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    153c:	84 b5       	in	r24, 0x24	; 36
    153e:	8f 77       	andi	r24, 0x7F	; 127
    1540:	84 bd       	out	0x24, r24	; 36
    1542:	08 95       	ret
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1544:	84 b5       	in	r24, 0x24	; 36
    1546:	8f 7d       	andi	r24, 0xDF	; 223
    1548:	84 bd       	out	0x24, r24	; 36
    154a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    154c:	e0 eb       	ldi	r30, 0xB0	; 176
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	8f 77       	andi	r24, 0x7F	; 127
    1554:	80 83       	st	Z, r24
    1556:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1558:	e0 eb       	ldi	r30, 0xB0	; 176
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8f 7d       	andi	r24, 0xDF	; 223
    1560:	80 83       	st	Z, r24
    1562:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1564:	e0 e9       	ldi	r30, 0x90	; 144
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8f 77       	andi	r24, 0x7F	; 127
    156c:	80 83       	st	Z, r24
    156e:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1570:	e0 e9       	ldi	r30, 0x90	; 144
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	8f 7d       	andi	r24, 0xDF	; 223
    1578:	80 83       	st	Z, r24
    157a:	08 95       	ret
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    157c:	e0 e9       	ldi	r30, 0x90	; 144
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	87 7f       	andi	r24, 0xF7	; 247
    1584:	80 83       	st	Z, r24
    1586:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1588:	e0 ea       	ldi	r30, 0xA0	; 160
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8f 77       	andi	r24, 0x7F	; 127
    1590:	80 83       	st	Z, r24
    1592:	08 95       	ret
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1594:	e0 ea       	ldi	r30, 0xA0	; 160
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 7d       	andi	r24, 0xDF	; 223
    159c:	80 83       	st	Z, r24
    159e:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    15a0:	e0 ea       	ldi	r30, 0xA0	; 160
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	87 7f       	andi	r24, 0xF7	; 247
    15a8:	80 83       	st	Z, r24
    15aa:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    15ac:	e0 e2       	ldi	r30, 0x20	; 32
    15ae:	f1 e0       	ldi	r31, 0x01	; 1
    15b0:	80 81       	ld	r24, Z
    15b2:	8f 77       	andi	r24, 0x7F	; 127
    15b4:	80 83       	st	Z, r24
    15b6:	08 95       	ret
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    15b8:	e0 e2       	ldi	r30, 0x20	; 32
    15ba:	f1 e0       	ldi	r31, 0x01	; 1
    15bc:	80 81       	ld	r24, Z
    15be:	8f 7d       	andi	r24, 0xDF	; 223
    15c0:	80 83       	st	Z, r24
    15c2:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    15c4:	e0 e2       	ldi	r30, 0x20	; 32
    15c6:	f1 e0       	ldi	r31, 0x01	; 1
    15c8:	80 81       	ld	r24, Z
    15ca:	87 7f       	andi	r24, 0xF7	; 247
    15cc:	80 83       	st	Z, r24
    15ce:	08 95       	ret

000015d0 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	fc 01       	movw	r30, r24
    15d8:	e1 5b       	subi	r30, 0xB1	; 177
    15da:	fe 4f       	sbci	r31, 0xFE	; 254
    15dc:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    15de:	fc 01       	movw	r30, r24
    15e0:	eb 56       	subi	r30, 0x6B	; 107
    15e2:	fe 4f       	sbci	r31, 0xFE	; 254
    15e4:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    15e6:	88 23       	and	r24, r24
    15e8:	79 f1       	breq	.+94     	; 0x1648 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	fc 01       	movw	r30, r24
    15f2:	eb 50       	subi	r30, 0x0B	; 11
    15f4:	fe 4f       	sbci	r31, 0xFE	; 254
    15f6:	a5 91       	lpm	r26, Z+
    15f8:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
    15fa:	fc 01       	movw	r30, r24
    15fc:	e5 52       	subi	r30, 0x25	; 37
    15fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1600:	c5 91       	lpm	r28, Z+
    1602:	d4 91       	lpm	r29, Z

	if (mode == INPUT) { 
    1604:	61 11       	cpse	r22, r1
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <pinMode+0x50>
		uint8_t oldSREG = SREG;
    1608:	9f b7       	in	r25, 0x3f	; 63
                cli();
    160a:	f8 94       	cli
		*reg &= ~bit;
    160c:	8c 91       	ld	r24, X
    160e:	e2 2f       	mov	r30, r18
    1610:	e0 95       	com	r30
    1612:	8e 23       	and	r24, r30
    1614:	8c 93       	st	X, r24
		*out &= ~bit;
    1616:	28 81       	ld	r18, Y
    1618:	e2 23       	and	r30, r18
    161a:	e8 83       	st	Y, r30
		SREG = oldSREG;
    161c:	9f bf       	out	0x3f, r25	; 63
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <pinMode+0x78>
	} else if (mode == INPUT_PULLUP) {
    1620:	62 30       	cpi	r22, 0x02	; 2
    1622:	61 f4       	brne	.+24     	; 0x163c <pinMode+0x6c>
		uint8_t oldSREG = SREG;
    1624:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1626:	f8 94       	cli
		*reg &= ~bit;
    1628:	3c 91       	ld	r19, X
    162a:	82 2f       	mov	r24, r18
    162c:	80 95       	com	r24
    162e:	83 23       	and	r24, r19
    1630:	8c 93       	st	X, r24
		*out |= bit;
    1632:	e8 81       	ld	r30, Y
    1634:	e2 2b       	or	r30, r18
    1636:	e8 83       	st	Y, r30
		SREG = oldSREG;
    1638:	9f bf       	out	0x3f, r25	; 63
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
    163c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    163e:	f8 94       	cli
		*reg |= bit;
    1640:	ec 91       	ld	r30, X
    1642:	e2 2b       	or	r30, r18
    1644:	ec 93       	st	X, r30
		SREG = oldSREG;
    1646:	8f bf       	out	0x3f, r24	; 63
	}
}
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    164e:	1f 93       	push	r17
    1650:	cf 93       	push	r28
    1652:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	f9 01       	movw	r30, r18
    165a:	e7 5f       	subi	r30, 0xF7	; 247
    165c:	fe 4f       	sbci	r31, 0xFE	; 254
    165e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1660:	f9 01       	movw	r30, r18
    1662:	e1 5b       	subi	r30, 0xB1	; 177
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    1668:	f9 01       	movw	r30, r18
    166a:	eb 56       	subi	r30, 0x6B	; 107
    166c:	fe 4f       	sbci	r31, 0xFE	; 254
    166e:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1670:	cc 23       	and	r28, r28
    1672:	c9 f0       	breq	.+50     	; 0x16a6 <digitalWrite+0x58>
    1674:	d6 2f       	mov	r29, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1676:	81 11       	cpse	r24, r1
    1678:	43 df       	rcall	.-378    	; 0x1500 <turnOffPWM>

	out = portOutputRegister(port);
    167a:	ec 2f       	mov	r30, r28
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	e5 52       	subi	r30, 0x25	; 37
    1684:	fe 4f       	sbci	r31, 0xFE	; 254
    1686:	a5 91       	lpm	r26, Z+
    1688:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    168a:	8f b7       	in	r24, 0x3f	; 63
	cli();
    168c:	f8 94       	cli

	if (val == LOW) {
    168e:	d1 11       	cpse	r29, r1
    1690:	06 c0       	rjmp	.+12     	; 0x169e <digitalWrite+0x50>
		*out &= ~bit;
    1692:	9c 91       	ld	r25, X
    1694:	e1 2f       	mov	r30, r17
    1696:	e0 95       	com	r30
    1698:	e9 23       	and	r30, r25
    169a:	ec 93       	st	X, r30
    169c:	03 c0       	rjmp	.+6      	; 0x16a4 <digitalWrite+0x56>
	} else {
		*out |= bit;
    169e:	ec 91       	ld	r30, X
    16a0:	e1 2b       	or	r30, r17
    16a2:	ec 93       	st	X, r30
	}

	SREG = oldSREG;
    16a4:	8f bf       	out	0x3f, r24	; 63
}
    16a6:	df 91       	pop	r29
    16a8:	cf 91       	pop	r28
    16aa:	1f 91       	pop	r17
    16ac:	08 95       	ret

000016ae <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    16ae:	bf 92       	push	r11
    16b0:	cf 92       	push	r12
    16b2:	df 92       	push	r13
    16b4:	ef 92       	push	r14
    16b6:	ff 92       	push	r15
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	b8 2e       	mov	r11, r24
    16c2:	16 2f       	mov	r17, r22
    16c4:	04 2f       	mov	r16, r20
    16c6:	c7 e0       	ldi	r28, 0x07	; 7
    16c8:	d0 e0       	ldi	r29, 0x00	; 0

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    16ca:	e2 2e       	mov	r14, r18
    16cc:	f1 2c       	mov	r15, r1
    16ce:	0f 2e       	mov	r0, r31
    16d0:	f7 e0       	ldi	r31, 0x07	; 7
    16d2:	cf 2e       	mov	r12, r31
    16d4:	d1 2c       	mov	r13, r1
    16d6:	f0 2d       	mov	r31, r0
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
    16d8:	01 11       	cpse	r16, r1
    16da:	0d c0       	rjmp	.+26     	; 0x16f6 <shiftOut+0x48>
    16dc:	c6 01       	movw	r24, r12
    16de:	8c 1b       	sub	r24, r28
    16e0:	9d 0b       	sbc	r25, r29
			digitalWrite(dataPin, !!(val & (1 << i)));
    16e2:	b7 01       	movw	r22, r14
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <shiftOut+0x3c>
    16e6:	75 95       	asr	r23
    16e8:	67 95       	ror	r22
    16ea:	8a 95       	dec	r24
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <shiftOut+0x38>
    16ee:	61 70       	andi	r22, 0x01	; 1
    16f0:	8b 2d       	mov	r24, r11
    16f2:	ad df       	rcall	.-166    	; 0x164e <digitalWrite>
    16f4:	0a c0       	rjmp	.+20     	; 0x170a <shiftOut+0x5c>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    16f6:	b7 01       	movw	r22, r14
    16f8:	0c 2e       	mov	r0, r28
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <shiftOut+0x52>
    16fc:	75 95       	asr	r23
    16fe:	67 95       	ror	r22
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <shiftOut+0x4e>
    1704:	61 70       	andi	r22, 0x01	; 1
    1706:	8b 2d       	mov	r24, r11
    1708:	a2 df       	rcall	.-188    	; 0x164e <digitalWrite>
			
		digitalWrite(clockPin, HIGH);
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	81 2f       	mov	r24, r17
    170e:	9f df       	rcall	.-194    	; 0x164e <digitalWrite>
		digitalWrite(clockPin, LOW);		
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	81 2f       	mov	r24, r17
    1714:	9c df       	rcall	.-200    	; 0x164e <digitalWrite>
    1716:	21 97       	sbiw	r28, 0x01	; 1
    1718:	f8 f6       	brcc	.-66     	; 0x16d8 <shiftOut+0x2a>
	}
}
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	bf 90       	pop	r11
    172c:	08 95       	ret

0000172e <__divmodhi4>:
    172e:	97 fb       	bst	r25, 7
    1730:	07 2e       	mov	r0, r23
    1732:	16 f4       	brtc	.+4      	; 0x1738 <__divmodhi4+0xa>
    1734:	00 94       	com	r0
    1736:	06 d0       	rcall	.+12     	; 0x1744 <__divmodhi4_neg1>
    1738:	77 fd       	sbrc	r23, 7
    173a:	08 d0       	rcall	.+16     	; 0x174c <__divmodhi4_neg2>
    173c:	35 d0       	rcall	.+106    	; 0x17a8 <__udivmodhi4>
    173e:	07 fc       	sbrc	r0, 7
    1740:	05 d0       	rcall	.+10     	; 0x174c <__divmodhi4_neg2>
    1742:	3e f4       	brtc	.+14     	; 0x1752 <__divmodhi4_exit>

00001744 <__divmodhi4_neg1>:
    1744:	90 95       	com	r25
    1746:	81 95       	neg	r24
    1748:	9f 4f       	sbci	r25, 0xFF	; 255
    174a:	08 95       	ret

0000174c <__divmodhi4_neg2>:
    174c:	70 95       	com	r23
    174e:	61 95       	neg	r22
    1750:	7f 4f       	sbci	r23, 0xFF	; 255

00001752 <__divmodhi4_exit>:
    1752:	08 95       	ret

00001754 <__udivmodsi4>:
    1754:	a1 e2       	ldi	r26, 0x21	; 33
    1756:	1a 2e       	mov	r1, r26
    1758:	aa 1b       	sub	r26, r26
    175a:	bb 1b       	sub	r27, r27
    175c:	fd 01       	movw	r30, r26
    175e:	0d c0       	rjmp	.+26     	; 0x177a <__udivmodsi4_ep>

00001760 <__udivmodsi4_loop>:
    1760:	aa 1f       	adc	r26, r26
    1762:	bb 1f       	adc	r27, r27
    1764:	ee 1f       	adc	r30, r30
    1766:	ff 1f       	adc	r31, r31
    1768:	a2 17       	cp	r26, r18
    176a:	b3 07       	cpc	r27, r19
    176c:	e4 07       	cpc	r30, r20
    176e:	f5 07       	cpc	r31, r21
    1770:	20 f0       	brcs	.+8      	; 0x177a <__udivmodsi4_ep>
    1772:	a2 1b       	sub	r26, r18
    1774:	b3 0b       	sbc	r27, r19
    1776:	e4 0b       	sbc	r30, r20
    1778:	f5 0b       	sbc	r31, r21

0000177a <__udivmodsi4_ep>:
    177a:	66 1f       	adc	r22, r22
    177c:	77 1f       	adc	r23, r23
    177e:	88 1f       	adc	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	1a 94       	dec	r1
    1784:	69 f7       	brne	.-38     	; 0x1760 <__udivmodsi4_loop>
    1786:	60 95       	com	r22
    1788:	70 95       	com	r23
    178a:	80 95       	com	r24
    178c:	90 95       	com	r25
    178e:	9b 01       	movw	r18, r22
    1790:	ac 01       	movw	r20, r24
    1792:	bd 01       	movw	r22, r26
    1794:	cf 01       	movw	r24, r30
    1796:	08 95       	ret

00001798 <__tablejump2__>:
    1798:	ee 0f       	add	r30, r30
    179a:	ff 1f       	adc	r31, r31
    179c:	88 1f       	adc	r24, r24
    179e:	8b bf       	out	0x3b, r24	; 59
    17a0:	07 90       	elpm	r0, Z+
    17a2:	f6 91       	elpm	r31, Z
    17a4:	e0 2d       	mov	r30, r0
    17a6:	19 94       	eijmp

000017a8 <__udivmodhi4>:
    17a8:	aa 1b       	sub	r26, r26
    17aa:	bb 1b       	sub	r27, r27
    17ac:	51 e1       	ldi	r21, 0x11	; 17
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <__udivmodhi4_ep>

000017b0 <__udivmodhi4_loop>:
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	a6 17       	cp	r26, r22
    17b6:	b7 07       	cpc	r27, r23
    17b8:	10 f0       	brcs	.+4      	; 0x17be <__udivmodhi4_ep>
    17ba:	a6 1b       	sub	r26, r22
    17bc:	b7 0b       	sbc	r27, r23

000017be <__udivmodhi4_ep>:
    17be:	88 1f       	adc	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	5a 95       	dec	r21
    17c4:	a9 f7       	brne	.-22     	; 0x17b0 <__udivmodhi4_loop>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	08 95       	ret

000017d0 <_exit>:
    17d0:	f8 94       	cli

000017d2 <__stop_program>:
    17d2:	ff cf       	rjmp	.-2      	; 0x17d2 <__stop_program>
